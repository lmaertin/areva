package de.tubs.areva.command;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.IHandler;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gef4.graph.Edge;
import org.eclipse.gef4.graph.Graph;
import org.eclipse.gef4.layout.algorithms.SpringLayoutAlgorithm;
import org.eclipse.gef4.layout.algorithms.TreeLayoutAlgorithm;
import org.eclipse.gef4.zest.fx.ZestProperties;
import org.eclipse.jface.window.Window;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.handlers.HandlerUtil;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.repository.BasicComponent;

import de.tubs.areva.emf.model.darg.Architecture;
import de.tubs.areva.emf.model.darg.ArchitectureComposite;
import de.tubs.areva.emf.model.darg.DARGNode;
import de.tubs.areva.emf.model.qadag.Node;
import de.tubs.areva.emf.model.qadag.QadagFactory;
import de.tubs.areva.resourcerelations.Platform;
import de.tubs.areva.resourcerelations.ResourceGroup;
import de.tubs.areva.ui.view.DARGZestView;
import de.tubs.areva.ui.wizard.CreateARGWizard;
import de.tubs.areva.ui.wizard.CreateDARGWizard;
import de.tubs.areva.util.CSVReader;
import de.tubs.areva.util.emf.ResourceManager;
import de.uka.ipd.sdq.pcm.designdecision.DecisionSpace;
import de.uka.ipd.sdq.pcm.designdecision.DegreeOfFreedomInstance;
import de.uka.ipd.sdq.pcm.designdecision.gdof.DegreeOfFreedom;
import de.uka.ipd.sdq.pcm.designdecision.specific.AssembledComponentDegree;
import javafx.scene.shape.Circle;

public class OpenARGWizardHandler extends AbstractHandler implements IHandler {

	private static int i;
	private int id = 0;
	protected static final String ID = ZestProperties.CSS_ID__NE;
	protected static final String LABEL = ZestProperties.LABEL__NE;
	
	
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		
		/*
		CreateARGWizard wizard = new CreateARGWizard(HandlerUtil.getActiveWorkbenchWindow(event).getShell());
	    wizard.setBlockOnOpen(true);
	    wizard.open();
	    
	    setupExampleDARGZest(wizard);
	    */
		
		CreateDARGWizard wizard = new CreateDARGWizard();
		
		
		WizardDialog wizardDialog = new WizardDialog(
				HandlerUtil.getActiveWorkbenchWindow(event).getShell(),
				wizard);
		
		if(wizardDialog.open() == Window.OK) {
			System.out.println("Ok pressed");
			
			setupExampleDARGZest(wizard);
			
		} else {
			System.out.println("Cancel pressed");
		}
		
		return null;
	}
	
	private HashMap<String, HashMap<AssemblyContext, BasicComponent>> getCSVAllocation() {
		
		//TODO: Build HashMap from .csv
		return null;
		
	}
	
	private HashMap<String, HashMap<String, String>> getFakeCSVAllocation() {
		
		HashMap<String, HashMap<String, String>> archs = new HashMap<>();
		
		// Arch1
		HashMap<String, String> arch1 = new HashMap<>();
		arch1.put("MCS control", "MCS control");
		
		archs.put("3", arch1);
		
		// Arch2
		HashMap<String, String> arch2 = new HashMap<>();
		arch2.put("MCS control", "MCS control advanced");
				
		archs.put("4", arch2);
		
		// Arch3
		HashMap<String, String> arch3 = new HashMap<>();
		arch3.put("MCS control", "MCS control simple");
				
		archs.put("5", arch3);
		
		return archs;
		
	}
	
	private void setupExampleDARGZest(CreateDARGWizard wizard) {
		
		String outputDir = wizard.pageThree.outputDirectory.replace('\\', '/') + "/";
		
		// setup candidates file
		String csvFile = wizard.pageTwo.candidatesFile.toString();
		String csvPath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + csvFile;
		CSVReader csvReader = new CSVReader(csvPath, ";");
		String[][] candidatesFile = csvReader.getTable();
		
		//TODO: Parse a .csv file instead of fake data
		HashMap<String, HashMap<String, String>> csvAllocation = getFakeCSVAllocation();
		
		// Find ALL BasicComponents that a specific architecture candidate uses
		HashMap<String, List<BasicComponent>> architectures = new HashMap<>();
		
		ResourceSet pcmSystemRS = new ResourceSetImpl();
		org.palladiosimulator.pcm.system.System pcmSystem = 
				(org.palladiosimulator.pcm.system.System) pcmSystemRS.getResource(wizard.pageOneThree.systemFile, true).getContents().get(0);
		
		ResourceSet dseDesignDecisionsRS = new ResourceSetImpl();
		DecisionSpace dseDesignDecisions = 
				(DecisionSpace) dseDesignDecisionsRS.getResource(wizard.pageOneTwo.designdecisionsFile, true).getContents().get(0);
		
		for(Map.Entry<String, HashMap<String, String>> architecture: csvAllocation.entrySet()) {
			
			List<BasicComponent> selectedComponents = new ArrayList<>();
			
			for(AssemblyContext assemblyContext: pcmSystem.getAssemblyContexts__ComposedStructure()) {
				
				String contextName = assemblyContext.getEntityName();
				
				if(!architecture.getValue().containsKey(contextName)) {
					
					selectedComponents.add((BasicComponent) assemblyContext.getEncapsulatedComponent__AssemblyContext());
				
				} else {
					
					for(DegreeOfFreedomInstance dof: dseDesignDecisions.getDegreesOfFreedom()) {
						
						if(dof instanceof AssembledComponentDegree) {
							
							AssembledComponentDegree componentDegree = (AssembledComponentDegree) dof;
							
							String degreeId = ((AssemblyContext)componentDegree.getPrimaryChanged()).getId();
							String contextId = assemblyContext.getId();
							
							if(degreeId.equals(contextId)) {
								
								for(EObject component: componentDegree.getClassDesignOptions()) {
									
									BasicComponent basicComponent = (BasicComponent) component;
									
									String degreeName = architecture.getValue().get(((AssemblyContext)componentDegree.getPrimaryChanged()).getEntityName());
									
									String componentName = basicComponent.getEntityName();
									
									if(componentName.equals(degreeName)) {
										
										selectedComponents.add(basicComponent);
									}
								}
							}
						}
					}
					
				}
			}
			
			architectures.put(architecture.getKey(), selectedComponents);
		}
		
		// Extract used resources for each architecture candidate
		HashMap<String, List<de.tubs.areva.resourcerelations.Resource>> architectureResources = new HashMap<>();
		
		for(Map.Entry<String, List<BasicComponent>> architecture: architectures.entrySet()) {
			
			List<de.tubs.areva.resourcerelations.Resource> usedResources = new ArrayList<>();
			
			ResourceSet arevaResourceRelationsRS = new ResourceSetImpl();
			Platform arevaResourceRelations = 
					(Platform) arevaResourceRelationsRS.getResource(wizard.pageOneOne.resourceRelationsFile, true).getContents().get(0);
			
			for(BasicComponent basicComponent: architecture.getValue()) {
				
				for(ResourceGroup group: arevaResourceRelations.getGroups()) {
					
					String groupComponentId = group.getAnnotatedComponent().getId();
					String basicComponentId = basicComponent.getId();
					
					if(groupComponentId.contentEquals(basicComponentId)) {
						usedResources.addAll(group.getResources());
					}
				}
			}
			
			architectureResources.put(architecture.getKey(), usedResources);
		}
		
		// Load metaqadag
		de.tubs.areva.emf.model.qadag.File metaQadag = QadagFactory.eINSTANCE.createFile();	
		metaQadag.setName("Meta-QADAG");
		metaQadag.setRoot(QadagFactory.eINSTANCE.createNode());
		metaQadag.getRoot().setName("Meta-QADAG");
	
		for(int i = 0; i < 3; i++) {
			Node node = QadagFactory.eINSTANCE.createNode();
			node.setName(candidatesFile[0][i].split(":")[0]);
			node.setWeight(0.333f);
		
			metaQadag.getRoot().getNodes().add(node);
		}
		
		// Save meta-qadag
		ResourceSet qadagRS = new ResourceSetImpl();
		Resource metaqadagResource = ResourceManager.createAndAddResource(
			outputDir + "meta.qadag", 
			new String[] {"qadag"}, 
			qadagRS);
		metaqadagResource.getContents().add(metaQadag);
		ResourceManager.saveResource(metaqadagResource);
		
		// Generate DARG from Architecture->UsedResources HashMap
		de.tubs.areva.emf.model.darg.File dargFile = de.tubs.areva.emf.model.darg.DargFactory.eINSTANCE.createFile();
		dargFile.setQadag(metaQadag);
		generateDARGFromResourceHashMap(architectureResources, dargFile);
		
		// save darg
		ResourceSet dargRS = new ResourceSetImpl();
		Resource architectureResource = ResourceManager.createAndAddResource(
				outputDir + "architectures.darg",
				new String[] {".darg"}, 
				dargRS);
		
		architectureResource.getContents().add(dargFile);
		ResourceManager.saveResource(architectureResource);
		
		// generate zest tree
		Graph dargZestTree = generateTreeFromModel(dargFile.getRoot());
		
		DARGZestView view = null;
		
		try {
			view = (DARGZestView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("Mittwochsqadag.dargzestview");
		} catch (PartInitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(view != null) {
			view.setGraph(dargZestTree);
		}
		
		for(IProject project: ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
			try {
				project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	
	public void generateDARGFromResourceHashMap(
			HashMap<String, List<de.tubs.areva.resourcerelations.Resource>> architectureMap,
			de.tubs.areva.emf.model.darg.File dargFile
			) {
		
		ArchitectureComposite root = de.tubs.areva.emf.model.darg.DargFactory.eINSTANCE.createArchitectureComposite();
		dargFile.setRoot(root);
		
		for(Map.Entry<String, List<de.tubs.areva.resourcerelations.Resource>> architectureKV: architectureMap.entrySet()) {
			
			de.tubs.areva.emf.model.darg.Architecture architecture = de.tubs.areva.emf.model.darg.DargFactory.eINSTANCE.createArchitecture();
			
			architecture.setName(architectureKV.getKey());
			
			// TODO: Get from QADAG calculation
			Random random = new Random();
			architecture.setValue(random.nextFloat() * 100f);
			
			de.tubs.areva.emf.model.qadag.File qadag = EcoreUtil.copy(dargFile.getQadag());
			qadag.setName(architectureKV.getKey());
			qadag.getRoot().setName(architectureKV.getKey());
			architecture.setQadag(qadag);
			
			architecture.getUsedResources().addAll(architectureKV.getValue());
			
			root.getNodes().add(architecture);
			
		}
		
		for(DARGNode dargNode: root.getNodes()) {
			
			Architecture architecture = (Architecture) dargNode;
			
			for(DARGNode dargNode2: root.getNodes()) {
				
				Architecture architecture2 = (Architecture) dargNode2;
				
				if(architecture != architecture2) {
					
					boolean connection = true;
					
					for(de.tubs.areva.resourcerelations.Resource resource2: architecture2.getUsedResources()) {
						
						boolean inside = false;
						
						for(de.tubs.areva.resourcerelations.Resource resource: architecture.getUsedResources()) {
							
							if(EcoreUtil.equals(resource2, resource)) {
								
								inside = true;
							}
						}
						
						if(!inside) {
							
							connection = false;
							break;
						}
					}
					
					if(connection) {
						
						architecture.getOutgoingArchitectures().add(architecture2);
					}
				}
			}
		}
	}
	
	private void setupExampleDARGZest(CreateARGWizard wizard) {
		
		wizard.getOutputDirectory().replace('\\', '/').split( ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());
		String outputDir = wizard.getOutputDirectory().replace('\\', '/') + "/";
		
		// setup candidates file
		String csvFile = wizard.getCandidatesFile().toString();
		String csvPath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + csvFile;
		CSVReader csvReader = new CSVReader(csvPath, ";");
		String[][] candidatesFile = csvReader.getTable();
		
		ResourceSet resourceSet = new ResourceSetImpl();
		
		// generate meta-qadag
			
		de.tubs.areva.emf.model.qadag.File metaQadag = QadagFactory.eINSTANCE.createFile();	
		metaQadag.setName("Meta-QADAG");
		metaQadag.setRoot(QadagFactory.eINSTANCE.createNode());
		metaQadag.getRoot().setName("Meta-QADAG");
	
		for(int i = 0; i < 3; i++) {
			Node node = QadagFactory.eINSTANCE.createNode();
			node.setName(candidatesFile[0][i].split(":")[0]);
			node.setWeight(0.333f);
		
			metaQadag.getRoot().getNodes().add(node);
		}
	
		// save meta-qadag
		Resource metaqadagResource = ResourceManager.createAndAddResource(
			outputDir + "meta.qadag", 
			new String[] {"qadag"}, 
			resourceSet);
		metaqadagResource.getContents().add(metaQadag);
		ResourceManager.saveResource(metaqadagResource);
			
		
		// parse newick to DARG
		String newickFile = wizard.getNewickFile().toString();
		String newickPath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + newickFile;
		de.tubs.areva.emf.model.darg.File dargFile = de.tubs.areva.emf.model.darg.DargFactory.eINSTANCE.createFile();
		dargFile.setQadag(metaQadag);
		
		byte[] encoded = new byte[1];
		try {
			encoded = Files.readAllBytes(Paths.get(newickPath));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String newickString = new String(encoded, StandardCharsets.UTF_8);
		
		generateDARG(newickString, dargFile);
		
		// save darg
		Resource architectureResource = ResourceManager.createAndAddResource(
				outputDir + "architectures.darg",
				new String[] {".darg"}, 
				resourceSet);
		
		architectureResource.getContents().add(dargFile);
		ResourceManager.saveResource(architectureResource);
		
		// generate zest tree
		Graph dargZestTree = generateTreeFromModel(dargFile.getRoot());
		
		DARGZestView view = null;
		
		try {
			view = (DARGZestView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("Mittwochsqadag.dargzestview");
		} catch (PartInitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(view != null) {
			view.setGraph(dargZestTree);
		}
		
		for(IProject project: ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
			try {
				project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	private Graph generateTreeFromModel(de.tubs.areva.emf.model.darg.DARGNode node) {
		List<org.eclipse.gef4.graph.Node> nodes = new ArrayList<>();
		List<org.eclipse.gef4.graph.Edge> edges = new ArrayList<>();
		HashMap<Architecture, org.eclipse.gef4.graph.Node> archToNode = new HashMap<>();
		
		if(node instanceof de.tubs.areva.emf.model.darg.ArchitectureComposite) {
			
			for(DARGNode child: ((de.tubs.areva.emf.model.darg.ArchitectureComposite) node).getNodes()) {
				
				if(child instanceof de.tubs.areva.emf.model.darg.Architecture) {
					
					de.tubs.areva.emf.model.darg.Architecture architecture = (de.tubs.areva.emf.model.darg.Architecture) child;
					org.eclipse.gef4.graph.Node newNode = n(ZestProperties.LABEL__NE, "Architecture " + architecture.getName() + ": " + architecture.getValue(), ZestProperties.TOOLTIP__N, "Architecture " + architecture.getName());
					
					Graph qadag = createSimpleQadagGraphFromModel(architecture.getQadag());
					newNode.setNestedGraph(qadag);
					nodes.add(newNode);
					
					archToNode.put(architecture, newNode);
				} 
			}
			
			for(DARGNode child: ((de.tubs.areva.emf.model.darg.ArchitectureComposite) node).getNodes()) {

				if(child instanceof Architecture) {
					
					Architecture architecture = (Architecture) child;
					
						
					for(Architecture outgoingArchitecture: architecture.getOutgoingArchitectures()) {
						
						List<de.tubs.areva.resourcerelations.Resource> excludes = new ArrayList<>();
						
						for(de.tubs.areva.resourcerelations.Resource resource: architecture.getUsedResources()) {
							boolean contains = false;
							for(de.tubs.areva.resourcerelations.Resource resource2: outgoingArchitecture.getUsedResources()) {
								if(EcoreUtil.equals(resource, resource2)) {
									contains = true;
								}
							}
							
							if(!contains) {
								excludes.add(resource);
							}
						}
						
						edges.add(e(archToNode.get(architecture), archToNode.get(outgoingArchitecture), "Resources Lost: " + excludes.size(), ZestProperties.TARGET_DECORATION__E, new javafx.scene.shape.Polygon(0, 0, 10, 3, 10, -3),
								ZestProperties.TARGET_DECORATION_CSS_STYLE__E, "-fx-fill: white;"));
					}
					
				} 
			}
		}
		
		HashMap<String, Object> attrs = new HashMap<>();
		attrs.put(ZestProperties.LAYOUT_ALGORITHM__G, new SpringLayoutAlgorithm());
		
		return new Graph(attrs, nodes, edges);
	}
	
	private void generateDARG(String newickString, de.tubs.areva.emf.model.darg.File file) {
		
		int end = getClosingParenthesis(newickString);
		
		file.setRoot(de.tubs.areva.emf.model.darg.DargFactory.eINSTANCE.createArchitectureComposite());
		
		generateDARG(newickString.substring(1, end), file.getRoot(), file);
	}
	
	private void generateDARG(String newickString, de.tubs.areva.emf.model.darg.DARGNode node, de.tubs.areva.emf.model.darg.File file) {
		
		boolean end = false;
		
		while(!end) {
			
			if(newickString.charAt(0) == '(') {
				
				de.tubs.areva.emf.model.darg.ArchitectureComposite newNode = de.tubs.areva.emf.model.darg.DargFactory.eINSTANCE.createArchitectureComposite();
				((de.tubs.areva.emf.model.darg.ArchitectureComposite) node).getNodes().add(newNode);
				
				int endIndex = getClosingParenthesis(newickString);
				String nextString = newickString.substring(1, endIndex);
				generateDARG(nextString, newNode, file);
				
				newickString = newickString.substring(endIndex+2, newickString.length());
				
				int valueIndex = newickString.indexOf(',');
				if(valueIndex == -1) {
					end = true;
					valueIndex = newickString.indexOf(')');
					if(valueIndex == -1) {
						valueIndex = newickString.length();
					}
				}
				String valueSubstring = newickString.substring(0, valueIndex);
				float value = Float.parseFloat(valueSubstring);
				
				newNode.setValue(value);
				if(!end) {
					newickString = newickString.substring(valueIndex+1, newickString.length());
				}
				
			}
			else
			{
				de.tubs.areva.emf.model.darg.Architecture architecture = de.tubs.areva.emf.model.darg.DargFactory.eINSTANCE.createArchitecture();
				
				int valueIndex = newickString.indexOf(':');
				
				int endIndex = newickString.indexOf(',');
				if(endIndex == -1) {
					end = true;
					endIndex = newickString.indexOf(')');
					if(endIndex == -1) {
						endIndex = newickString.length();
					}
				}
				
				
				String nameSubstring = newickString.substring(0, valueIndex);
				String valueSubstring = newickString.substring(valueIndex+1, endIndex);
				
				String name = nameSubstring;
				float value = Float.parseFloat(valueSubstring);
				
				architecture.setName(name);
				architecture.setValue(value);
				
				de.tubs.areva.emf.model.qadag.File qadag = EcoreUtil.copy(file.getQadag());
				qadag.setName(name);
				qadag.getRoot().setName(name);
				architecture.setQadag(qadag);
				
				((de.tubs.areva.emf.model.darg.ArchitectureComposite) node).getNodes().add(architecture);
				
				if(!end) {
					newickString = newickString.substring(endIndex + 1, newickString.length());
				}
				
			}
		}
	}
	
	private int getClosingParenthesis(final String strng) {

        if (!strng.trim().startsWith("(")) {
            throw new IllegalArgumentException(String.format("Illegal Argument [%s] does not start with an opening parenthesis", strng));
        }

        int depth = 0;
        for (int i = 0; i < strng.length(); i++) {
            if (strng.charAt(i) == '(') {
                depth++;
            }
            if (strng.charAt(i) == ')' && (--depth == 0)) {
                return i;
            }
        }
        return -1;
    }
	/*
	private void setupExampleARGZest(CreateARGWizard wizard) {
		// Get metadata
		String outputURIString = wizard.getOutputDirectory().replace('\\', '/').split( ResourcesPlugin.getWorkspace().getRoot().getLocation().toString())[1];
		String outputDir = wizard.getOutputDirectory().replace('\\', '/') + "/";
		
		String csvFile = wizard.getCandidatesFile().toString();
		String csvPath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + csvFile;
		CSVReader csvReader = new CSVReader(csvPath, ";");
		String[][] candidatesFile = csvReader.getTable();
		
		int numberOfArchitectures = candidatesFile.length - 1;
		
		ResourceSet resourceSet = new ResourceSetImpl();
		
		// Generate Meta-Qadag
		
		areva.emf.model.qadag.File metaQadag = QadagFactory.eINSTANCE.createFile();	
		metaQadag.setName("Meta-QADAG");
		metaQadag.setRoot(QadagFactory.eINSTANCE.createNode());
		metaQadag.getRoot().setName("Meta-QADAG");
		
		for(int i = 0; i < 3; i++) {
			Node node = QadagFactory.eINSTANCE.createNode();
			node.setName(candidatesFile[0][i].split(":")[0]);
			node.setWeight(0.333f);
			
			metaQadag.getRoot().getNodes().add(node);
		}
		
		Resource metaqadagResource = ResourceManager.createAndAddResource(
				outputDir + "meta-qadag.mittwochqadag", 
				new String[] {"mittwochqadag"}, 
				resourceSet);
		metaqadagResource.getContents().add(metaQadag);
		ResourceManager.saveResource(metaqadagResource);
		
		// Create architectures and attach qadag clones
		areva.emf.model.darg.File argFile = DargFactory.eINSTANCE.createFile();
		argFile.setQadag(metaQadag);
		
		for(int i = 0; i < numberOfArchitectures; i++) {
			
			areva.emf.model.qadag.File qadag = EcoreUtil.copy(metaQadag);
			
			for(Node node: metaQadag.getRoot().getNodes()) {
				if(node.getName().equals(candidatesFile[0][0].split(":")[0])) {
					node.setValue(Float.parseFloat(candidatesFile[i+1][0]));
				}
				else if(node.getName().equals(candidatesFile[0][1].split(":")[0])) {
					node.setValue(Float.parseFloat(candidatesFile[i+1][1]));
				}
				else if(node.getName().equals(candidatesFile[0][2].split(":")[0])) {
					node.setValue(Float.parseFloat(candidatesFile[i+1][2]));
				}
			}
			
			Architecture architecture = DargFactory.eINSTANCE.createArchitecture();
			
			name = "";
			
			for(int k = 0; k < candidatesFile[i].length; k++) {
				if(candidatesFile[0][k].equals("Candidate ID")) {
					name = candidatesFile[i+1][k];
					break;
				}
			}
			
			architecture.setName("ID: " + name);
			qadag.setName("ID: " + name);
			qadag.getRoot().setName("ID: " + name);
			
			architecture.setQadag(qadag);
			
			argFile.getArchitectures().add(architecture);
		}
		
		// Calculate DARG edges
		for(Architecture arch1 : argFile.getArchitectures()) {
			
			QADAGHelper.setResoucesForArchitecture(arch1, csvReader);
		}
		
		for(Architecture arch1 : argFile.getArchitectures()) {
			
			for(Architecture arch2 : argFile.getArchitectures()) {
				
				if(arch1 != arch2) {
					
					if((QADAGHelper.calculateResourceConnection(arch1, arch2).get(1).size() > 0)
						|| (QADAGHelper.calculateResourceConnection(arch1, arch2).get(0).size() == 0)) {
						
						arch1.getOutgoingArchitectures().add(arch2);
						
					}
				}
			}
		}
		
		// Save DARG
		Resource architectureResource = ResourceManager.createAndAddResource(
				outputDir + "architectures.arg", 
				new String[] {".arg"}, 
				resourceSet);
		
		architectureResource.getContents().add(argFile);
		ResourceManager.saveResource(architectureResource);
		
		// Show DARG in view
		DARGZestView view = null;
		
		
		try {
			view = (DARGZestView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("Mittwochsqadag.dargzestview");
		} catch (PartInitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(view != null) {
			
			Graph argGraph = createArgGraphFromModel(argFile);
			
			view.setGraph(argGraph);
			
			for(IProject project: ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
				try {
					project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
				} catch (CoreException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
	*/
	/*
	private Graph createArgGraphFromModel(File arg) {
		
		HashMap<Architecture, org.eclipse.gef4.graph.Node> archToNode = new HashMap<>();
		
		List<org.eclipse.gef4.graph.Node> nodes = new ArrayList<>();
		
		for(Arg.Architecture architecture: arg.getArchitectures()) {
			org.eclipse.gef4.graph.Node node = n(ZestProperties.LABEL__NE, "" + architecture.getName(), ZestProperties.TOOLTIP__N, "Architecture " + architecture.getName());
			node.setNestedGraph(createSimpleQadagGraphFromModel(architecture.getQadag()));
			archToNode.put(architecture, node);
			nodes.add(node);
		}
		
		List<org.eclipse.gef4.graph.Edge> edges = new ArrayList<>();
		
		for(Arg.Architecture architecture: arg.getArchitectures()) {
			
			for(Arg.Architecture outgoingArchitecture: architecture.getOutgoingArchitectures()) {
				
				edges.add(e(archToNode.get(architecture), archToNode.get(outgoingArchitecture)));
			}
		}
		
		HashMap<String, Object> attrs = new HashMap<>();
		attrs.put(ZestProperties.LAYOUT_ALGORITHM__G, new SpringLayoutAlgorithm());
		
		return new Graph(attrs, nodes, edges);
	}
	*/
	
	private Graph createSimpleQadagGraphFromModel(de.tubs.areva.emf.model.qadag.File qadagFile) {
		
		List<org.eclipse.gef4.graph.Node> nodes = new ArrayList<>();
		List<org.eclipse.gef4.graph.Edge> edges = new ArrayList<>();
		
		org.eclipse.gef4.graph.Node rootNode = n(ZestProperties.LABEL__NE, "" + qadagFile.getRoot().getName() + ": " + qadagFile.getRoot().getValue(), ZestProperties.TOOLTIP__N, "Node " + qadagFile.getRoot().getName());
		
		nodes.add(rootNode);
		
		for(Node qadagNode: qadagFile.getRoot().getNodes()) {
			
			org.eclipse.gef4.graph.Node node = n(ZestProperties.LABEL__NE, "" + qadagNode.getName() + ": " + qadagFile.getRoot().getValue(), ZestProperties.TOOLTIP__N, "Node " + qadagNode.getName());
			nodes.add(node);
			edges.add(e(rootNode, node, ""));
		}
		
		HashMap<String, Object> attrs = new HashMap<>();
		
		attrs.put(ZestProperties.LAYOUT_ALGORITHM__G, new TreeLayoutAlgorithm());
		return new Graph(attrs, nodes, edges);
	}
	
	protected static org.eclipse.gef4.graph.Node n(Object... attr) {
		org.eclipse.gef4.graph.Node.Builder builder = new org.eclipse.gef4.graph.Node.Builder();
		
		String id = genId();
		builder.attr(ID, id).attr(LABEL, id);
		for (int i = 0; i < attr.length; i += 2) {
			builder.attr(attr[i].toString(), attr[i + 1]);
		}
		return builder.buildNode();
	}
	
	protected static Edge e(org.eclipse.gef4.graph.Node n,
			org.eclipse.gef4.graph.Node m, String label, Object... attr) {
		
		org.eclipse.gef4.graph.Edge.Builder builder = new Edge.Builder(n, m).attr(LABEL, label).attr(ID,
				genId());
		
		
		for (int i = 0; i < attr.length; i += 2) {
			builder.attr(attr[i].toString(), attr[i + 1]);
		}
		return builder.buildEdge();
	}
	
	private static String genId() {
		i++;
		return "" + i;
	}
	/*
	private void setupExampleARG(CreateARGWizard wizard) {
		
		// -1. Open allocation file
		ResourceSet pcmAllocationRS = new ResourceSetImpl();
		Allocation pcmAllocation = (Allocation) pcmAllocationRS.getResource(wizard.getAllocationFile(), true).getContents().get(0);
		
		
		for(AssemblyContext assembly : pcmAllocation.getSystem_Allocation().getAssemblyContexts__ComposedStructure()){
			int annotatedValue = QADAGHelper.getTaggedValue((BasicComponent)assembly.getEncapsulatedComponent__AssemblyContext());
			System.out.println("Assembly name: " + assembly.getEntityName() + " Annotated: " + annotatedValue);
		}
		
		// Generate or load meta-qadag
		String outputURIString = wizard.getOutputDirectory().replace('\\', '/').split( ResourcesPlugin.getWorkspace().getRoot().getLocation().toString())[1];			

		URI qadagURI = wizard.getQadagFile();
		
		String csvFile = wizard.getCandidatesFile().toString();
		String csvPath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + csvFile;
		CSVReader csvReader = new CSVReader(csvPath, ";");
		String[][] candidatesFile = csvReader.getTable();
		
		int numberOfArchitectures = candidatesFile.length - 1;
		
		if(qadagURI == null) {
			
			// 2.1 Generate Meta-QADAG and representation file
			final SessionCreationOperation o = new DefaultLocalSessionCreationOperation(URI.createPlatformResourceURI(outputURIString + "/meta-qadag.aird", true), new NullProgressMonitor());
			
			try {
				o.execute();
			} catch (CoreException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			final Session session = o.getCreatedSession();
			final TransactionalEditingDomain domain = session.getTransactionalEditingDomain();
			
			domain.getCommandStack().execute(new GenericCommand() {
				@Override
				public void execute() {
					
					metaQadag = QadagFactory.eINSTANCE.createFile();
					
					metaQadag.setName("Meta-QADAG");
					metaQadag.setRoot(QadagFactory.eINSTANCE.createNode());
					metaQadag.getRoot().setName("Meta-QADAG");
					
					for(int i = 0; i < 3; i++) {
						Node node = QadagFactory.eINSTANCE.createNode();
						node.setName(candidatesFile[0][i].split(":")[0]);
						node.setWeight(0.333f);
						
						metaQadag.getRoot().getNodes().add(node);
					}
				}
			});
			
			domain.getCommandStack().execute(new CreateResourceCommand(domain, outputURIString + "/meta-qadag.mittwochqadag", metaQadag));
			
			// 2.2 Add the resource to Sirius session
			AddSemanticResourceCommand addCommandToSession = new AddSemanticResourceCommand(session, URI.createPlatformResourceURI(outputURIString + "/meta-qadag.mittwochqadag", true), new NullProgressMonitor() );
			session.getTransactionalEditingDomain().getCommandStack().execute(addCommandToSession);
			
			// 2.3 Find and add viewpoint
			Set<Viewpoint> availableViewpoints = ViewpointSelection.getViewpoints("mittwochqadag");
			if(availableViewpoints.isEmpty())
				try {
					throw new Exception("Could not found viewport for fileextension " + ".mittwochqadag");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			Set<Viewpoint> viewpoints = new HashSet<Viewpoint>();
			for(Viewpoint p : availableViewpoints)
				viewpoints.add(SiriusResourceHelper.getCorrespondingViewpoint(session, p));

			ViewpointSelection.Callback callback = new ViewpointSelectionCallbackWithConfimation();
			 
			@SuppressWarnings("restriction")
			RecordingCommand command = new ChangeViewpointSelectionCommand(
					session,
					callback,
					viewpoints, new HashSet<Viewpoint>(), true, new NullProgressMonitor());
			domain.getCommandStack().execute(command);
			
			// 2.4 Setup a new representation file for the session via transactions
			
			final CreateRepresentationCommand createRepresentationCommand = new CreateRepresentationCommand(session,
					DialectManager.INSTANCE.getAvailableRepresentationDescriptions(session.getSelectedViewpoints(false),  metaQadag ).iterator().next(), metaQadag, "Tree",
		            new NullProgressMonitor());
			
			domain.getCommandStack().execute(createRepresentationCommand);
			session.save(new NullProgressMonitor());
			
			DialectUIManager.INSTANCE.openEditor(session, createRepresentationCommand.getCreatedRepresentation(), new NullProgressMonitor());
			
			//session.close(new NullProgressMonitor());
			
			qadagURI = URI.createPlatformResourceURI(outputURIString + "/meta-qadag.mittwochqadag", true);
		}
		
		
		// 1. generate ARG
		URI airdURI = URI.createPlatformResourceURI(outputURIString + "/generated" + ".aird", true);
		
		final SessionCreationOperation o = new DefaultLocalSessionCreationOperation(URI.createPlatformResourceURI(outputURIString + "/generated" + ".aird", true), new NullProgressMonitor());
		try {
			o.execute();
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		final Session session = o.getCreatedSession();
		//final Session session = SessionManager.INSTANCE.getSession(airdURI, new NullProgressMonitor());
		
		final TransactionalEditingDomain domain = session.getTransactionalEditingDomain();
		final CreateArgModelCommand createArgModelCommand = new CreateArgModelCommand(domain, URI.createPlatformResourceURI(outputURIString + "/generated" + ".arg", true),ArgFactory.eINSTANCE.createFile());
		
		domain.getCommandStack().execute(createArgModelCommand);

		final Arg.File argFile = createArgModelCommand.getCreatedArg();
		
		//adding the resource also to Sirius session
		AddSemanticResourceCommand addCommandToSession = new AddSemanticResourceCommand(session, URI.createPlatformResourceURI(outputURIString + "/generated" + ".arg", true), new NullProgressMonitor() );
		session.getTransactionalEditingDomain().getCommandStack().execute(addCommandToSession);
		
		// 5. Find and add viewpoint
		Set<Viewpoint> availableViewpoints = ViewpointSelection.getViewpoints("arg");
		if(availableViewpoints.isEmpty())
			try {
				throw new Exception("Could not found viewport for fileextension " + ".arg");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		Set<Viewpoint> viewpoints = new HashSet<Viewpoint>();
		for(Viewpoint p : availableViewpoints)
			viewpoints.add(SiriusResourceHelper.getCorrespondingViewpoint(session, p));

		ViewpointSelection.Callback callback = new ViewpointSelectionCallbackWithConfimation();
		 
		@SuppressWarnings("restriction")
		RecordingCommand command = new ChangeViewpointSelectionCommand(
				session,
				callback,
				viewpoints, new HashSet<Viewpoint>(), true, new NullProgressMonitor());
		domain.getCommandStack().execute(command);
		
		// 6. Setup a new representation file for the session via transactions
		
		final CreateRepresentationCommand createRepresentationCommand = new CreateRepresentationCommand(session,
				DialectManager.INSTANCE.getAvailableRepresentationDescriptions(session.getSelectedViewpoints(false),  argFile ).iterator().next(), argFile, "Graph",
	            new NullProgressMonitor());
		
		domain.getCommandStack().execute(createRepresentationCommand);
		
		Resource qadagBlueprintResource = null;
		
		for(int i = 1; i <= numberOfArchitectures; i++) {
			
			// 2. Fill it with some architectures
			Architecture architecture = ArgFactory.eINSTANCE.createArchitecture();
			
			name = "";
			
			for(int k = 0; k < candidatesFile[i].length; k++) {
				if(candidatesFile[0][k].equals("Candidate ID")) {
					name = candidatesFile[i][k];
					break;
				}
			}
			
			architecture.setName("ID: " + name);
			
			
			// 3. Aquire Qadag evaluation model (blueprint)
			ResourceSet qadagBlueprintResourceSet = new ResourceSetImpl();
			qadagBlueprintResource = qadagBlueprintResourceSet.getResource(qadagURI, true);
			if(qadagBlueprintResource == null) {
				System.out.println("NULL");
			}
			MittwochQadag.File qadagBlueprintFile = (MittwochQadag.File)qadagBlueprintResource.getContents().get(0);
			
			// 4. Clone the qadag and setup a new resource for it via transactions
			
			airdURI = URI.createPlatformResourceURI(outputURIString + "/generated" + (i+1) + ".aird", true);
			
			final SessionCreationOperation oQ = new DefaultLocalSessionCreationOperation(URI.createPlatformResourceURI(outputURIString + "/architecture_" + name + ".aird", true), new NullProgressMonitor());
			try {
				oQ.execute();
			} catch (CoreException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			final Session sessionQ = oQ.getCreatedSession();
			//final Session session = SessionManager.INSTANCE.getSession(airdURI, new NullProgressMonitor());
			
			final TransactionalEditingDomain domainQ = sessionQ.getTransactionalEditingDomain();
			final CreateQadagModelCommand createQadagModelCommand = new CreateQadagModelCommand(domainQ, URI.createPlatformResourceURI(outputURIString + "/architecture_" + name + ".mittwochqadag", true), EcoreUtil.copy(qadagBlueprintFile), architecture.getName(), candidatesFile, i);
			
			domainQ.getCommandStack().execute(createQadagModelCommand);

			final MittwochQadag.File qadagFile = createQadagModelCommand.getCreatedQadag();
			
			architecture.setQadag(qadagFile);
			
			//adding the resource also to Sirius session
			AddSemanticResourceCommand addCommandToSessionQ = new AddSemanticResourceCommand(sessionQ, URI.createPlatformResourceURI(outputURIString + "/architecture_" + name + ".mittwochqadag", true), new NullProgressMonitor() );
			sessionQ.getTransactionalEditingDomain().getCommandStack().execute(addCommandToSessionQ);
			
			// 5. Find and add viewpoint
			Set<Viewpoint> availableViewpointsQ = ViewpointSelection.getViewpoints("mittwochqadag");
			if(availableViewpointsQ.isEmpty())
				try {
					throw new Exception("Could not found viewport for fileextension " + ".mittwochqadag");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			Set<Viewpoint> viewpointsQ = new HashSet<Viewpoint>();
			for(Viewpoint p : availableViewpointsQ)
				viewpointsQ.add(SiriusResourceHelper.getCorrespondingViewpoint(sessionQ, p));

			ViewpointSelection.Callback callbackQ = new ViewpointSelectionCallbackWithConfimation();
			 
			@SuppressWarnings("restriction")
			RecordingCommand commandQ = new ChangeViewpointSelectionCommand(
					sessionQ,
					callbackQ,
					viewpointsQ, new HashSet<Viewpoint>(), true, new NullProgressMonitor());
			domainQ.getCommandStack().execute(commandQ);
			
			// 6. Setup a new representation file for the session via transactions
			
			final CreateRepresentationCommand createRepresentationCommandQ = new CreateRepresentationCommand(sessionQ,
					DialectManager.INSTANCE.getAvailableRepresentationDescriptions(sessionQ.getSelectedViewpoints(false),  qadagFile ).iterator().next(), qadagFile, "Tree",
		            new NullProgressMonitor());
			
			domainQ.getCommandStack().execute(createRepresentationCommandQ);
		    
			
			// 6. Attach the cloned qadag to its architecture
			//architecture.setQadag(qadagFile);
			
			
			domain.getCommandStack().execute(new GenericCommand() {
				@Override
				public void execute() {
					argFile.getArchitectures().add(architecture);
				}
			});
			

			sessionQ.save(new NullProgressMonitor());
			
			//System.out.println("Session: " + URI.createPlatformResourceURI("/" + wizard.getOutputDirectory().split(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString())[0] + "/generated" + (i+1) + ".aird", true).toString());
		}
		
		// 7. Attach the evaluation model to arg file
		ResourceSet qadagBlueprintResourceSet = new ResourceSetImpl();
		MittwochQadag.File qadagBlueprintFile = (MittwochQadag.File)qadagBlueprintResource.getContents().get(0);
		
		domain.getCommandStack().execute(new GenericCommand() {
			@Override
			public void execute() {
				argFile.setQadag(qadagBlueprintFile);
				
				for(Architecture arch1 : argFile.getArchitectures()) {
					
					QADAGHelper.setResoucesForArchitecture(arch1, csvReader);
				}
				
				for(Architecture arch1 : argFile.getArchitectures()) {
					
					for(Architecture arch2 : argFile.getArchitectures()) {
						
						if(arch1 != arch2) {
							
							if((QADAGHelper.calculateResourceConnection(arch1, arch2).get(1).size() > 0)
								|| (QADAGHelper.calculateResourceConnection(arch1, arch2).get(0).size() == 0)) {
								
								arch1.getOutgoingArchitectures().add(arch2);
								
							}
						}
					}
				}
			}
		});
		
		session.save(new NullProgressMonitor());
		
		ResourceManager.saveResource(argFile.eResource());
		
		DialectUIManager.INSTANCE.openEditor(session, createRepresentationCommand.getCreatedRepresentation(), new NullProgressMonitor());
		
		
	}
	*/
	/*
	private void generateModels(CreateARGWizard wizard) {
		
		// 1. Read in the csv file into a table
		String csvFile = wizard.getCandidatesFile().toString();
		String csvPath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + csvFile;
		
		CSVReader csvReader = new CSVReader(csvPath, ";");
		
		csvReader.printToConsole();
		
		String[][] candidatesFile = csvReader.getTable();
		
		int numberOfArchitectures = candidatesFile.length - 1;
		String outputURIString = wizard.getOutputDirectory().replace('\\', '/').split( ResourcesPlugin.getWorkspace().getRoot().getLocation().toString())[1];	
		
		// 2. Generate Meta-QADAG if none has been chosen
		URI qadagURI = wizard.getQadagFile();
		
		
		if(qadagURI == null) {
			
			// 2.1 Generate Meta-QADAG and representation file
			final SessionCreationOperation o = new DefaultLocalSessionCreationOperation(URI.createPlatformResourceURI(outputURIString + "/meta-qadag.aird", true), new NullProgressMonitor());
			
			try {
				o.execute();
			} catch (CoreException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			final Session session = o.getCreatedSession();
			final TransactionalEditingDomain domain = session.getTransactionalEditingDomain();
						
			metaQadag = QadagFactory.eINSTANCE.createFile();
			domain.getCommandStack().execute(new CreateResourceCommand(domain, outputURIString + "/meta-qadag.mittwochqadag", metaQadag));
			
			domain.getCommandStack().execute(new GenericCommand() {
				@Override
				public void execute() {
					
					
					metaQadag.setName("Meta-QADAG");
					metaQadag.setRoot(QadagFactory.eINSTANCE.createNode());
					metaQadag.getRoot().setName("Meta-QADAG");
				}
			});
			
			domain.getCommandStack().execute(new GenericCommand() {
				@Override
				public void execute() {
					
					for(int i = 0; i < 3; i++) {
						Node node = QadagFactory.eINSTANCE.createNode();
						node.setName(candidatesFile[0][i].split(":")[0]);
						node.setWeight(0.333f);
						
						metaQadag.getRoot().getNodes().add(node);
					}
				}
			});
			
			ResourceManager.saveResource(metaQadag.eResource());
			
			// 2.2 Add the resource to Sirius session
			AddSemanticResourceCommand addCommandToSession = new AddSemanticResourceCommand(session, URI.createPlatformResourceURI(outputURIString + "/meta-qadag.mittwochqadag", true), new NullProgressMonitor() );
			session.getTransactionalEditingDomain().getCommandStack().execute(addCommandToSession);
			
			// 2.3 Find and add viewpoint
			Set<Viewpoint> availableViewpoints = ViewpointSelection.getViewpoints("mittwochqadag");
			if(availableViewpoints.isEmpty())
				try {
					throw new Exception("Could not found viewport for fileextension " + ".mittwochqadag");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			Set<Viewpoint> viewpoints = new HashSet<Viewpoint>();
			for(Viewpoint p : availableViewpoints)
				viewpoints.add(SiriusResourceHelper.getCorrespondingViewpoint(session, p));

			ViewpointSelection.Callback callback = new ViewpointSelectionCallbackWithConfimation();
			 
			@SuppressWarnings("restriction")
			RecordingCommand command = new ChangeViewpointSelectionCommand(
					session,
					callback,
					viewpoints, new HashSet<Viewpoint>(), true, new NullProgressMonitor());
			domain.getCommandStack().execute(command);
			
			// 2.4 Setup a new representation file for the session via transactions
			
			final CreateRepresentationCommand createRepresentationCommand = new CreateRepresentationCommand(session,
					DialectManager.INSTANCE.getAvailableRepresentationDescriptions(session.getSelectedViewpoints(false),  metaQadag ).iterator().next(), metaQadag, "Tree",
		            new NullProgressMonitor());
			
			domain.getCommandStack().execute(createRepresentationCommand);
			session.save(new NullProgressMonitor());
			
			DialectUIManager.INSTANCE.openEditor(session, createRepresentationCommand.getCreatedRepresentation(), new NullProgressMonitor());
			
			//session.close(new NullProgressMonitor());
			
		} else {
			
			// Load Meta-QADAG from existing file
			
			ResourceSet qadagBlueprintResourceSet = new ResourceSetImpl();
			Resource qadagBlueprintResource = qadagBlueprintResourceSet.getResource(wizard.getQadagFile(), true);
			
			if(qadagBlueprintResource == null) {
				System.out.println("NULL");
			}
			
			metaQadag = (MittwochQadag.File)qadagBlueprintResource.getContents().get(0);
		}
		
		// 3. Create Arg file and populate it
		Arg.File argFile = ArgFactory.eINSTANCE.createFile();

		final SessionCreationOperation oS = new DefaultLocalSessionCreationOperation(URI.createPlatformResourceURI(outputURIString + "/generated.aird", true), new NullProgressMonitor());
		
		try {
			oS.execute();
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		final Session sessionS = oS.getCreatedSession();
		final TransactionalEditingDomain domainS = sessionS.getTransactionalEditingDomain();
		
		domainS.getCommandStack().execute(new CreateResourceCommand(domainS, outputURIString + "/generated.arg", argFile));
		
		for(i = 1; i <= numberOfArchitectures; i++) {
			
			
			// 3.1 Create qadag clones and corresponding resources
			Architecture architecture = ArgFactory.eINSTANCE.createArchitecture();
			
			MittwochQadag.File qadagClone = EcoreUtil.copy(metaQadag);
			
			name = "";
			
			for(int k = 0; k < candidatesFile[i].length; k++) {
				if(candidatesFile[0][k].equals("Candidate ID")) {
					name = candidatesFile[i][k];
					break;
				}
			}
			
			final SessionCreationOperation o = new DefaultLocalSessionCreationOperation(URI.createPlatformResourceURI(outputURIString + "/architecture_" + name + ".aird", true), new NullProgressMonitor());
			
			try {
				o.execute();
			} catch (CoreException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			final Session session = o.getCreatedSession();
			final TransactionalEditingDomain domain = session.getTransactionalEditingDomain();
			
			domain.getCommandStack().execute(new CreateResourceCommand(domain, outputURIString + "/architecture_" + name + ".mittwochqadag", qadagClone));
			
			domain.getCommandStack().execute(new GenericCommand() {

				@Override
				public void execute() {
					
					for (int j = 0; j < 3; j++) {
						
						QualityAspect aspect = QadagFactory.eINSTANCE.createQualityAspect();
						aspect.setName(candidatesFile[0][j].split(":")[0]);
						aspect.setValue(Float.parseFloat(candidatesFile[i][j]));
						
						qadagClone.getQualityAspects().add(aspect);
					}
					
					qadagClone.setName(name);
					qadagClone.getRoot().setName(name);
					QADAGHelper.setValueFromAspectsRecursive(qadagClone, qadagClone.getRoot());
				}
			});
			
			ResourceManager.saveResource(qadagClone.eResource());
			
			domainS.getCommandStack().execute(new GenericCommand() {

				@Override
				public void execute() {
					
					architecture.setName(name);
					
					architecture.setQadag(qadagClone);
					
					argFile.getArchitectures().add(architecture);
				}
			});
			
			
			// 3.2 Add the resource to Sirius session
			AddSemanticResourceCommand addCommandToSession = new AddSemanticResourceCommand(session, URI.createPlatformResourceURI(outputURIString + "/architecture_" + name + ".mittwochqadag", true), new NullProgressMonitor() );
			session.getTransactionalEditingDomain().getCommandStack().execute(addCommandToSession);
			
			// 3.3 Find and add viewpoint
			Set<Viewpoint> availableViewpoints = ViewpointSelection.getViewpoints("mittwochqadag");
			if(availableViewpoints.isEmpty())
				try {
					throw new Exception("Could not found viewport for fileextension " + ".mittwochqadag");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			Set<Viewpoint> viewpoints = new HashSet<Viewpoint>();
			for(Viewpoint p : availableViewpoints)
				viewpoints.add(SiriusResourceHelper.getCorrespondingViewpoint(session, p));

			ViewpointSelection.Callback callback = new ViewpointSelectionCallbackWithConfimation();
			 
			@SuppressWarnings("restriction")
			RecordingCommand command = new ChangeViewpointSelectionCommand(
					session,
					callback,
					viewpoints, new HashSet<Viewpoint>(), true, new NullProgressMonitor());
			domain.getCommandStack().execute(command);
			
			// 3.4 Setup a new representation file for the session via transactions
			
			final CreateRepresentationCommand createRepresentationCommand = new CreateRepresentationCommand(session,
					DialectManager.INSTANCE.getAvailableRepresentationDescriptions(session.getSelectedViewpoints(false),  qadagClone ).iterator().next(), qadagClone, "Tree",
		            new NullProgressMonitor());
			
			domain.getCommandStack().execute(createRepresentationCommand);
			
			session.save(new NullProgressMonitor());
		}
		
		// 4. Create Arg resources
		domainS.getCommandStack().execute(new GenericCommand() {

			@Override
			public void execute() {
				
				argFile.setQadag(metaQadag);
			}
		});
		
		ResourceManager.saveResource(argFile.eResource());
		
		// 2.2 Add the resource to Sirius session
		AddSemanticResourceCommand addCommandToSession = new AddSemanticResourceCommand(sessionS, URI.createPlatformResourceURI(outputURIString + "/generated.arg", true), new NullProgressMonitor() );
		sessionS.getTransactionalEditingDomain().getCommandStack().execute(addCommandToSession);
		
		// 2.3 Find and add viewpoint
		Set<Viewpoint> availableViewpoints = ViewpointSelection.getViewpoints("arg");
		if(availableViewpoints.isEmpty())
			try {
				throw new Exception("Could not found viewport for fileextension " + ".arg");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		Set<Viewpoint> viewpoints = new HashSet<Viewpoint>();
		for(Viewpoint p : availableViewpoints)
			viewpoints.add(SiriusResourceHelper.getCorrespondingViewpoint(sessionS, p));

		ViewpointSelection.Callback callback = new ViewpointSelectionCallbackWithConfimation();
		 
		@SuppressWarnings("restriction")
		RecordingCommand command = new ChangeViewpointSelectionCommand(
				sessionS,
				callback,
				viewpoints, new HashSet<Viewpoint>(), true, new NullProgressMonitor());
		domainS.getCommandStack().execute(command);
		
		// 2.4 Setup a new representation file for the session via transactions
		
		final CreateRepresentationCommand createRepresentationCommand = new CreateRepresentationCommand(sessionS,
				DialectManager.INSTANCE.getAvailableRepresentationDescriptions(sessionS.getSelectedViewpoints(false),  argFile ).iterator().next(), argFile, "Graph",
	            new NullProgressMonitor());
		
		domainS.getCommandStack().execute(createRepresentationCommand);
		
		sessionS.save(new NullProgressMonitor());
		
		
		DialectUIManager.INSTANCE.openEditor(sessionS, createRepresentationCommand.getCreatedRepresentation(), new NullProgressMonitor());
		//session.close(new NullProgressMonitor());
		 
		
	}
	*/
	/*
	private void setupExampleARG(CreateARGWizard wizard) {
		
		// 0. Open allocation file
		ResourceSet pcmAllocationRS = new ResourceSetImpl();
		Allocation pcmAllocation = (Allocation) pcmAllocationRS.getResource(wizard.getAllocationFile(), true).getContents().get(0);
		
		
		for(AssemblyContext assembly : pcmAllocation.getSystem_Allocation().getAssemblyContexts__ComposedStructure()){
			System.out.println("System info: " + assembly.getEntityName());
		}
		
		
		// 1. generate ARG
		String outputURIString = wizard.getOutputDirectory().replace('\\', '/').split( ResourcesPlugin.getWorkspace().getRoot().getLocation().toString())[1];			
		URI airdURI = URI.createPlatformResourceURI(outputURIString + "/generated" + ".aird", true);
		
		final SessionCreationOperation o = new DefaultLocalSessionCreationOperation(URI.createPlatformResourceURI(outputURIString + "/generated" + ".aird", true), new NullProgressMonitor());
		try {
			o.execute();
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		final Session session = o.getCreatedSession();
		//final Session session = SessionManager.INSTANCE.getSession(airdURI, new NullProgressMonitor());
		
		final TransactionalEditingDomain domain = session.getTransactionalEditingDomain();
		final CreateArgModelCommand createArgModelCommand = new CreateArgModelCommand(domain, URI.createPlatformResourceURI(outputURIString + "/generated" + ".arg", true),ArgFactory.eINSTANCE.createFile());
		
		domain.getCommandStack().execute(createArgModelCommand);

		final Arg.File argFile = createArgModelCommand.getCreatedArg();
		
		//adding the resource also to Sirius session
		AddSemanticResourceCommand addCommandToSession = new AddSemanticResourceCommand(session, URI.createPlatformResourceURI(outputURIString + "/generated" + ".arg", true), new NullProgressMonitor() );
		session.getTransactionalEditingDomain().getCommandStack().execute(addCommandToSession);
		
		// 5. Find and add viewpoint
		Set<Viewpoint> availableViewpoints = ViewpointSelection.getViewpoints("arg");
		if(availableViewpoints.isEmpty())
			try {
				throw new Exception("Could not found viewport for fileextension " + ".arg");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		Set<Viewpoint> viewpoints = new HashSet<Viewpoint>();
		for(Viewpoint p : availableViewpoints)
			viewpoints.add(SiriusResourceHelper.getCorrespondingViewpoint(session, p));

		ViewpointSelection.Callback callback = new ViewpointSelectionCallbackWithConfimation();
		 
		@SuppressWarnings("restriction")
		RecordingCommand command = new ChangeViewpointSelectionCommand(
				session,
				callback,
				viewpoints, new HashSet<Viewpoint>(), true, new NullProgressMonitor());
		domain.getCommandStack().execute(command);
		
		// 6. Setup a new representation file for the session via transactions
		
		final CreateRepresentationCommand createRepresentationCommand = new CreateRepresentationCommand(session,
				DialectManager.INSTANCE.getAvailableRepresentationDescriptions(session.getSelectedViewpoints(false),  argFile ).iterator().next(), argFile, "Graph",
	            new NullProgressMonitor());
		
		domain.getCommandStack().execute(createRepresentationCommand);
		
		
		
		
		
		for(int i = 0; i < 6; i++) {
			
			// 2. Fill it with some architectures
			Architecture architecture = ArgFactory.eINSTANCE.createArchitecture();
			architecture.setName("Arch " + (i+1));
			
			
			// 3. Aquire Qadag evaluation model (blueprint)
			ResourceSet qadagBlueprintResourceSet = new ResourceSetImpl();
			Resource qadagBlueprintResource = qadagBlueprintResourceSet.getResource(wizard.getQadagFile(), true);
			if(qadagBlueprintResource == null) {
				System.out.println("NULL");
			}
			MittwochQadag.File qadagBlueprintFile = (MittwochQadag.File)qadagBlueprintResource.getContents().get(0);
			
			// 4. Clone the qadag and setup a new resource for it via transactions
			
			airdURI = URI.createPlatformResourceURI(outputURIString + "/generated" + (i+1) + ".aird", true);
			
			final SessionCreationOperation oQ = new DefaultLocalSessionCreationOperation(URI.createPlatformResourceURI(outputURIString + "/generated" + (i+1) + ".aird", true), new NullProgressMonitor());
			try {
				oQ.execute();
			} catch (CoreException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			final Session sessionQ = oQ.getCreatedSession();
			//final Session session = SessionManager.INSTANCE.getSession(airdURI, new NullProgressMonitor());
			
			final TransactionalEditingDomain domainQ = sessionQ.getTransactionalEditingDomain();
			final CreateQadagModelCommand createQadagModelCommand = new CreateQadagModelCommand(domainQ, URI.createPlatformResourceURI(outputURIString + "/generated" + (i+1) + ".mittwochqadag", true), EcoreUtil.copy(qadagBlueprintFile), architecture.getName());
			
			domainQ.getCommandStack().execute(createQadagModelCommand);

			final MittwochQadag.File qadagFile = createQadagModelCommand.getCreatedQadag();
			
			architecture.setQadag(qadagFile);
			
			//adding the resource also to Sirius session
			AddSemanticResourceCommand addCommandToSessionQ = new AddSemanticResourceCommand(sessionQ, URI.createPlatformResourceURI(outputURIString + "/generated" + (i+1) + ".mittwochqadag", true), new NullProgressMonitor() );
			sessionQ.getTransactionalEditingDomain().getCommandStack().execute(addCommandToSessionQ);
			
			// 5. Find and add viewpoint
			Set<Viewpoint> availableViewpointsQ = ViewpointSelection.getViewpoints("mittwochqadag");
			if(availableViewpointsQ.isEmpty())
				try {
					throw new Exception("Could not found viewport for fileextension " + ".mittwochqadag");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			Set<Viewpoint> viewpointsQ = new HashSet<Viewpoint>();
			for(Viewpoint p : availableViewpointsQ)
				viewpointsQ.add(SiriusResourceHelper.getCorrespondingViewpoint(sessionQ, p));

			ViewpointSelection.Callback callbackQ = new ViewpointSelectionCallbackWithConfimation();
			 
			@SuppressWarnings("restriction")
			RecordingCommand commandQ = new ChangeViewpointSelectionCommand(
					sessionQ,
					callbackQ,
					viewpointsQ, new HashSet<Viewpoint>(), true, new NullProgressMonitor());
			domainQ.getCommandStack().execute(commandQ);
			
			// 6. Setup a new representation file for the session via transactions
			
			final CreateRepresentationCommand createRepresentationCommandQ = new CreateRepresentationCommand(sessionQ,
					DialectManager.INSTANCE.getAvailableRepresentationDescriptions(sessionQ.getSelectedViewpoints(false),  qadagFile ).iterator().next(), qadagFile, "Tree",
		            new NullProgressMonitor());
			
			domainQ.getCommandStack().execute(createRepresentationCommandQ);
		    
			
			// 6. Attach the cloned qadag to its architecture
			//architecture.setQadag(qadagFile);
			
			
			domain.getCommandStack().execute(new GenericCommand() {
				@Override
				public void execute() {
					argFile.getArchitectures().add(architecture);
				}
			});
			

			sessionQ.save(new NullProgressMonitor());
			
			//System.out.println("Session: " + URI.createPlatformResourceURI("/" + wizard.getOutputDirectory().split(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString())[0] + "/generated" + (i+1) + ".aird", true).toString());
		}
		
		// 7. Attach the evaluation model to arg file
		ResourceSet qadagBlueprintResourceSet = new ResourceSetImpl();
		Resource qadagBlueprintResource = qadagBlueprintResourceSet.getResource(wizard.getQadagFile(), true);
		MittwochQadag.File qadagBlueprintFile = (MittwochQadag.File)qadagBlueprintResource.getContents().get(0);
		
		domain.getCommandStack().execute(new GenericCommand() {
			@Override
			public void execute() {
				argFile.setQadag(qadagBlueprintFile);;
			}
		});
		
		session.save(new NullProgressMonitor());
		
		ResourceManager.saveResource(argFile.eResource());
		
		DialectUIManager.INSTANCE.openEditor(session, createRepresentationCommand.getCreatedRepresentation(), new NullProgressMonitor());
		
		
	}
	*/
}
