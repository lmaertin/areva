package de.tubs.areva.command;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.IHandler;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gef4.graph.Edge;
import org.eclipse.gef4.graph.Graph;
import org.eclipse.gef4.layout.algorithms.SpringLayoutAlgorithm;
import org.eclipse.gef4.zest.fx.ZestProperties;
import org.eclipse.jface.window.Window;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.handlers.HandlerUtil;
import org.javatuples.Pair;
import org.nfunk.jep.JEP;

import de.tubs.areva.emf.model.darg.ARG;
import de.tubs.areva.emf.model.darg.Architecture;
import de.tubs.areva.emf.model.darg.QualityAssignment;
import de.tubs.areva.emf.model.qadag.Node;
import de.tubs.areva.emf.model.qadag.QADAG;
import de.tubs.areva.resourcerelations.Resource;
import de.tubs.areva.resourcerelations.ResourceOptions;
import de.tubs.areva.ui.module.DARGZestEdge;
import de.tubs.areva.ui.module.DARGZestNode;
import de.tubs.areva.ui.module.QADAGZestNode;
import de.tubs.areva.ui.view.DARGZestView;
import de.tubs.areva.ui.wizard.SelectOperatingModeWizard;
import de.tubs.areva.util.IntervalUtils;
import de.tubs.areva.util.emf.ResourceManager;
import de.uka.ipd.sdq.pcm.designdecision.DecisionSpace;

public class SelectOperatingModeWizardHandler extends AbstractHandler implements IHandler {

	private static int i;
	private int id = 0;
	protected static final String ID = ZestProperties.CSS_ID__NE;
	protected static final String LABEL = ZestProperties.LABEL__NE;
	
	
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		
		SelectOperatingModeWizard wizard = new SelectOperatingModeWizard();
		
		
		WizardDialog wizardDialog = new WizardDialog(
				HandlerUtil.getActiveWorkbenchWindow(event).getShell(),
				wizard);
		
		if(wizardDialog.open() == Window.OK) {
			System.out.println("Ok pressed");
			
			//setupExampleDARGZest(wizard);
			setupOperatingMode(wizard);
			
		} else {
			System.out.println("Cancel pressed");
		}
		
		return null;
	}
	
	private void getAllResources(ResourceOptions options, List<Resource> allResources) {
		
		if(options.getSubGroups().size() > 0) {
			for(ResourceOptions subOptions: options.getSubGroups()) {
				getAllResources(subOptions, allResources);
			}
		} else {
			for(Resource resource: options.getResources()) {
				boolean contains = false;
				for(Resource allResource: allResources) {
					if(resource.getName().equals(allResource.getName())) {
						contains = true;
						break;
					}
				}
				
				if(!contains) {
					allResources.add(resource);
				}
			}
		}
	}
	
	private void getAllResourcesWithDupes(ResourceOptions options, List<Resource> allResources) {
		
		if(options.getSubGroups().size() > 0) {
			for(ResourceOptions subOptions: options.getSubGroups()) {
				getAllResources(subOptions, allResources);
			}
		} else {
			
			allResources.addAll(options.getResources());
		}
	}
	
	private void processFaultyResources(ARG dargFile, String[] resourceNames, String startingArchitectureName, HashMap<Pair<Architecture, Architecture>, String> processedPath) {
		
		Architecture start = null;
		List<Resource> activeResources = new ArrayList<Resource>();
		List<String> faultyResources = new ArrayList<String>();
		
		for(int i = 0; i < resourceNames.length; i++) {
			faultyResources.add(resourceNames[i]);
		}
		
		for(Architecture architecture: dargFile.getArchitectures()) {
			if(architecture.getId().equals(startingArchitectureName)) 
				start = architecture;
			
			for(ResourceOptions option: architecture.getBoundResourceOptions()) {
				getAllResources(option, activeResources);
			}
			
			architecture.setHidden(true);
		}
		
		Architecture current = start;
		
		for(String faulty: faultyResources) {
			if(current == null)
				break;
			
			current.setHidden(false);
			
			Architecture nextNode = null;
			
			Resource faultyResource = null;
			
			for(Resource activeResource: activeResources) {
				if(activeResource.getName().equals(faulty)) {
					faultyResource = activeResource;
				}
			}
			
			activeResources.remove(faultyResource);
			
			for(Architecture following: current.getRelatedArchitectures()) {
				
				boolean conditionsMet = true;
				
				for(ResourceOptions options: following.getBoundResourceOptions()) {
					conditionsMet = conditionsMet && conditionsMet(options, activeResources);
				}
				
				if(conditionsMet) {
					if(nextNode == null) {
						nextNode = following;
					} else {
						if(nextNode.getQuality() < following.getQuality()) {
							nextNode = following;
						}
					}
				}
			}
			if(nextNode != null)
				processedPath.put(new Pair(current, nextNode), "-" + faulty);
			
			current = nextNode;
		}
	}
	
	private boolean conditionsMet(ResourceOptions options, List<Resource> activeResources) {
		
		if(options.getSubGroups().size() > 0) {
			
			boolean conditionsMet = true;
			
			for(ResourceOptions subOptions: options.getSubGroups()) {
				conditionsMet = conditionsMet && conditionsMet(subOptions, activeResources);
			}
			
			return conditionsMet;
			
		} else {
			
			int containedResources = 0;
			
			for(Resource resource: options.getResources()) {
				for(Resource activeResource: activeResources) {
					if(resource.getName().equals(activeResource.getName())) {
						containedResources++;
					}
				}
			}
			
			if(containedResources < Integer.parseInt(options.getMinElements())) {
				return false;
			}
			
			return true;
		}
	}
	
	private void setupOperatingMode(SelectOperatingModeWizard wizard) {
		
		ResourceSet operatingModeRS = new ResourceSetImpl();
		
		ARG argFile = 
				(ARG) operatingModeRS.getResource(wizard.argPage.getArgFile(), true).getContents().get(0);
		
		QADAG metaQadagFile = 
				(QADAG) operatingModeRS.getResource(wizard.qadagPage.getQadagFile(), true).getContents().get(0);
		
		
		ARG dargFile = 
				EcoreUtil.copy(argFile);
		
		dargFile.setQadag(metaQadagFile);
		
		for(Architecture dargNode: dargFile.getArchitectures()) {
			
			if(dargNode instanceof Architecture) {
				Architecture architecture = (Architecture) dargNode;
			
				generateQadag(dargFile.getQadag(), architecture);
			}
		}
		
		// remove invalid architectures (NaN quality) 
		List<Architecture> toBeRemoved = new ArrayList<Architecture>();
		
		for(Architecture dargNode: dargFile.getArchitectures()) {
			if(dargNode instanceof Architecture) {
				Architecture architecture = (Architecture) dargNode;
				if(Double.isNaN(architecture.getQuality())) {
					toBeRemoved.add(architecture);
				}
			}
		}
		
		for(Architecture removed: toBeRemoved) {
			EcoreUtil.delete(removed);
		}
		
		
		
		// create valid edges
		calculateEdges(dargFile, Integer.parseInt(wizard.thresholdPage.getInput()));
		
		// process arg
		HashMap<Pair<Architecture,Architecture>, String> processedPath = new HashMap<Pair<Architecture,Architecture>, String>();
		processFaultyResources(dargFile, wizard.faultyResourcesPage.getInput().split(","), wizard.startPage.getInput(), processedPath);
		
		// save result darg
		ResourceSet dargRS = new ResourceSetImpl();
		org.eclipse.emf.ecore.resource.Resource architectureResource = ResourceManager.createAndAddResource(
				wizard.outputPage.outputDirectory + "\\" + wizard.namePage.getInput() + ".darg",
				new String[] {".darg"}, 
				dargRS);
		
		architectureResource.getContents().add(dargFile);
		
		
		
		ResourceManager.saveResource(architectureResource);
		
		
		// generate zest tree
		
		Graph dargZestTree = generateTreeFromModel(dargFile, processedPath);
		
		DARGZestView view = null;
		
		try {
			view = (DARGZestView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("Mittwochsqadag.dargzestview");
		} catch (PartInitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(view != null) {
			view.setGraph(dargZestTree);
		}
		
		for(IProject project: ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
			
			try {
				project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private void calculateEdges(ARG dargFile, int threshold) {
		
		for(Architecture arch1: dargFile.getArchitectures()) {
			
			for(Architecture arch2: dargFile.getArchitectures()) {
				
				if(arch1 == arch2) 
					continue;
				
				int arch1Resources = 0;
				int arch2Resources = 0;
				
				for(ResourceOptions option: arch1.getBoundResourceOptions()) {
					arch1Resources += getMinValue(option);
				}
				
				for(ResourceOptions option: arch2.getBoundResourceOptions()) {
					arch2Resources += getMinValue(option);
				}
				
				if(Math.abs(arch1Resources - arch2Resources) <= threshold) {
					arch1.getRelatedArchitectures().add(arch2);
				}
			}
		}
		
		for(Architecture architecture: dargFile.getArchitectures()) {
			if(architecture.getRelatedArchitectures().size() == 0) {
				EcoreUtil.delete(architecture);
			}
		}
		
	}
	
	private int getMinValue(ResourceOptions options) {
		
		if(options.getSubGroups().size() > 0) {
			
			int minValue = 0;
			
			for(ResourceOptions option: options.getSubGroups()) {
				minValue += getMinValue(option);
			}
			
			return minValue;
			
		} else {
			return Integer.parseInt(options.getMinElements());
		}
	}

	private double calculateQadag(Node node) {
		
		double result = 0f;
		if(node.getNodes().size() > 0) {
		
			for(Node child: node.getNodes()) {
				calculateQadag(child);
				result += child.getValue() * child.getWeight();
			}
		
			node.setValue(result);
			
		}
		
		return result;
	}
	
	private void generateQadag(QADAG metaQadag, Architecture architecture) {
		
		
		QADAG qadag = EcoreUtil.copy(metaQadag);
		qadag.setName(architecture.getId());
		qadag.getRoot().setName(architecture.getId());
		
		architecture.setQadag(qadag);
		
		
		for(Node node: qadag.getRoot().getNodes())
		{
			for(QualityAssignment quality: architecture.getQualityassignments()) {
			
				if(quality.getAttribute().equals(node.getName())) {
					
					node.setValue(quality.getValue());
					
				}
			}
		}
		
		
		architecture.setQuality(calculateQadag(architecture.getQadag().getRoot()));
	}
	
	float normalize(float value, float min, float max) {
		
		float normalized = (value - min) / (max - min);
		
		return normalized;
	}
	
	private Graph generateTreeFromModel(ARG archNodes, HashMap<Pair<Architecture, Architecture>, String> processedPath) {
		List<org.eclipse.gef4.graph.Node> nodes = new ArrayList<>();
		List<org.eclipse.gef4.graph.Edge> edges = new ArrayList<>();
		HashMap<Architecture, org.eclipse.gef4.graph.Node> archToNode = new HashMap<>();
		
		// draw nodes
		for(Architecture architecture: archNodes.getArchitectures()) {
			
			if(!architecture.isHidden()) {
				
				org.eclipse.gef4.graph.Node newNode = null;
				
				if(architecture.isOptimal()) {
					newNode = n(architecture, ZestProperties.LABEL__NE, "Optimal Architecture " + architecture.getId() + ": " + architecture.getQuality(), ZestProperties.TOOLTIP__N, "Architecture " + architecture.getId(), ZestProperties.SHAPE_CSS_STYLE__N, "-fx-border-color: green; -fx-border-width: 200;", ZestProperties.LABEL_CSS_STYLE__NE, "-fx-font-color: green;");
					ZestProperties.setShapeCssStyle(newNode, "-fx-background-color: green; -fx-border-width: 200; -fx-fill: green;");
					ZestProperties.setLabelCssStyle(newNode, "-fx-font-color: green;");
				} else {
					newNode = n(architecture, ZestProperties.LABEL__NE, "Architecture " + architecture.getId() + ": " + architecture.getQuality(), ZestProperties.TOOLTIP__N, "Architecture " + architecture.getId());
				}
				
				Graph qadag = createSimpleQadagGraphFromModel(architecture.getQadag());
				newNode.setNestedGraph(qadag);
				
				nodes.add(newNode);
				
				for(Architecture hiddenArchitecture: architecture.getRelatedArchitectures()) {
					
					Graph hiddenQadag = createSimpleQadagGraphFromModel(architecture.getQadag());
					
					org.eclipse.gef4.graph.Node hiddenNode = null;
					
					hiddenNode = n(architecture, ZestProperties.LABEL__NE, "Architecture " + architecture.getId() + ": " + architecture.getQuality(), ZestProperties.TOOLTIP__N, "Architecture " + architecture.getId());
					
					hiddenNode.setNestedGraph(hiddenQadag);
					
					archToNode.put(architecture, hiddenNode);
					
					ZestProperties.setShapeCssStyle(newNode, "-fx-background-color: white; -fx-border-width: 200; -fx-fill: white;");
					ZestProperties.setLabelCssStyle(newNode, "-fx-font-color: white;");
					
					if(hiddenArchitecture.isHidden()) {
						e(newNode, hiddenNode, "", ZestProperties.LABEL__NE, "", ZestProperties.TARGET_DECORATION__E, new javafx.scene.shape.Polygon(0, 0, 10, 3, 10, -3),
							ZestProperties.TARGET_DECORATION_CSS_STYLE__E, "-fx-fill: white;");
					}
					
				}
				
				archToNode.put(architecture, newNode);
			}
		}
		
		//draw edges
		for(Entry<Pair<Architecture,Architecture>,String> step: processedPath.entrySet()) {
			e(archToNode.get(step.getKey().getValue0()), archToNode.get(step.getKey().getValue1()), "" + step.getValue(), ZestProperties.LABEL__NE, "", ZestProperties.TARGET_DECORATION__E, new javafx.scene.shape.Polygon(0, 0, 10, 3, 10, -3),
					ZestProperties.TARGET_DECORATION_CSS_STYLE__E, "-fx-fill: red;");
		}
		
		HashMap<String, Object> attrs = new HashMap<>();
		attrs.put(ZestProperties.LAYOUT_ALGORITHM__G, new SpringLayoutAlgorithm());
		
		return new Graph(attrs, nodes, edges);
	}
	
	private List<Resource> getResourcesLost(Architecture source, Architecture target) {
		
		List<Resource> excludes = new ArrayList<>();
		
		for(Resource resource: source.getBoundResources()) {
			boolean contains = false;
			for(Resource resource2: target.getBoundResources()) {
				if(EcoreUtil.equals(resource, resource2)) {
					contains = true;
				}
			}
			
			if(!contains) {
				excludes.add(resource);
			}
		}
		
		return excludes;
	}
	
	private Graph createSimpleQadagGraphFromModel(QADAG qadagFile) {
		
		List<org.eclipse.gef4.graph.Node> nodes = new ArrayList<>();
		List<org.eclipse.gef4.graph.Edge> edges = new ArrayList<>();
		
		org.eclipse.gef4.graph.Node rootNode = n(null, ZestProperties.LABEL__NE, "" + qadagFile.getRoot().getName() + ": " + qadagFile.getRoot().getValue(), ZestProperties.TOOLTIP__N, "Node " + qadagFile.getRoot().getName());
		
		nodes.add(rootNode);
		
		for(Node qadagNode: qadagFile.getRoot().getNodes()) {
			
			org.eclipse.gef4.graph.Node node = nQ(qadagNode, ZestProperties.LABEL__NE, "" + qadagNode.getName() + ": " + qadagNode.getValue(), ZestProperties.TOOLTIP__N, "Node " + qadagNode.getName());
			
			nodes.add(node);
			edges.add(e(rootNode, node, ""));
		}
		
		HashMap<String, Object> attrs = new HashMap<>();
		
		attrs.put(ZestProperties.LAYOUT_ALGORITHM__G, new SpringLayoutAlgorithm());
		return new Graph(attrs, nodes, edges);
	}
	
	protected static org.eclipse.gef4.graph.Node n(Architecture architecture, Object... attr) {
		
		Map<String, Object> attrs = new HashMap<>();
		
		String id = genId();
		attrs.put(ID, id);
		attrs.put(LABEL, id);
		for (int i = 0; i < attr.length; i += 2) {
			attrs.put(attr[i].toString(), attr[i + 1]);
		}
		DARGZestNode zestNode = new DARGZestNode(attrs);
		zestNode.setArchitecture(architecture);
		
		return zestNode;
	}
	
protected static org.eclipse.gef4.graph.Node nQ(Node node, Object... attr) {
		
		Map<String, Object> attrs = new HashMap<>();
		
		String id = genId();
		attrs.put(ID, id);
		attrs.put(LABEL, id);
		for (int i = 0; i < attr.length; i += 2) {
			attrs.put(attr[i].toString(), attr[i + 1]);
		}
		QADAGZestNode zestNode = new QADAGZestNode(attrs);
		zestNode.setQadagNode(node);
		
		return zestNode;
	}
	
protected static Edge e(org.eclipse.gef4.graph.Node n,
		org.eclipse.gef4.graph.Node m, String label, Object... attr) {
	
	Map<String, Object> attrs = new HashMap<>();
	
	String id = genId();
	attrs.put(ID, id);
	attrs.put(LABEL, id);
	for (int i = 0; i < attr.length; i += 2) {
		attrs.put(attr[i].toString(), attr[i + 1]);
	}
	
	
	if((n instanceof DARGZestNode) && (m instanceof DARGZestNode)) {
		
		DARGZestEdge edge = new DARGZestEdge(attrs,n,m);
		edge.setSourceArchitecture(((DARGZestNode)n).getArchitecture());
		edge.setTargetArchitecture(((DARGZestNode)m).getArchitecture());
		
		return edge;
	} 
	
	Edge edge = new Edge(attrs, n, m);
	
	return edge;
}
	
	private static String genId() {
		i++;
		return "" + i;
	}
}
