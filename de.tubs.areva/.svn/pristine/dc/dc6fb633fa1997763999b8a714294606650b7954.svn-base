package de.tubs.areva.ui.wizard;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.emf.common.util.URI;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;

import de.tubs.areva.resourcerelations.Resource;
import de.tubs.areva.ui.dialog.ResourceFileSelectionDialog;

public class VisualizePage extends WizardPage {

	private Composite container;
	private List<String> allResources = null;
	private List<String> defaultPath = null;
	
	
	public int selection = 1;
	
	public VisualizePage(List<String> allResources, List<String> defaultPath) {
		super("Visualize Results");
		setTitle("Visualize Results");
		setDescription("Select different options to visualize results.");
		this.allResources = allResources;
		this.defaultPath = defaultPath;
	}
	
	@Override
	public void createControl(Composite parent) {
		
		container = new Composite(parent, SWT.NONE);
		
		container.setLayout(new RowLayout(SWT.HORIZONTAL));
		
		Group optionsGroup = new Group(container, SWT.NONE);
		optionsGroup.setLayout(new RowLayout(SWT.VERTICAL));
		optionsGroup.setText("Visualization Option");
		
		Button singleArchitecture = new Button(optionsGroup, SWT.RADIO);
		singleArchitecture.setText("Achitecture");
		singleArchitecture.setData(1);
		
		Button tailoredPath = new Button(optionsGroup, SWT.RADIO);
		tailoredPath.setText("Path (tailored)");
		tailoredPath.setData(2);
		
		Button fullPath = new Button(optionsGroup, SWT.RADIO);
		fullPath.setText("Path (full)");
		fullPath.setData(3);
		
		setControl(container);
		
		final Group architectureGroup = new Group(container, SWT.SHADOW_ETCHED_IN);
		architectureGroup.setText("Architecture Options");
		
		final Group pathGroup = new Group(container, SWT.SHADOW_ETCHED_IN);
		pathGroup.setText("Path Options");
		pathGroup.setEnabled(false);
		pathGroup.setLayout(new RowLayout(SWT.VERTICAL));
		
		SelectionListener selectionListener = new SelectionAdapter () {
	         public void widgetSelected(SelectionEvent event) {
	            selection = (int) ((Button) event.getSource()).getData();
	            
	            if(selection >= 2) {
	            	pathGroup.setEnabled(true);
	            	architectureGroup.setEnabled(false);
	            } else {
	            	pathGroup.setEnabled(false);
	            	architectureGroup.setEnabled(true);
	            }
	         };
	    };
	    singleArchitecture.addSelectionListener(selectionListener);
		tailoredPath.addSelectionListener(selectionListener);
		fullPath.addSelectionListener(selectionListener);
		
		setPageComplete(true);
		
		final List<Combo> pathCombos = new ArrayList<Combo>();
		
		List<String> allResourcesLocal = new ArrayList<String>(allResources);
		
		SelectionListener comboSelectionListener = new SelectionAdapter () {
	         public void widgetSelected(SelectionEvent event) {
	            
	        	int i = 0;
	        	for(Combo combo: pathCombos) {
	        		if(((Combo)event.getSource()) != combo) {
		        		combo.setItems(getOptions(allResources, defaultPath, i, pathCombos));
		        		i++;
	        		}
	        	}
	         };
	      };
		
		int i = 0;
		for(String pathResource: defaultPath) {
			Combo combo = new Combo(pathGroup, SWT.READ_ONLY);
			combo.setItems(getOptions(allResources, defaultPath, i, pathCombos));
			combo.setSize(250, 65);
			pathCombos.add(combo);
			allResourcesLocal.remove(pathResource);
			combo.addSelectionListener(comboSelectionListener);
			combo.requestLayout();
			i++;
		}
		
		
		/*
		container = new Composite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		container.setLayout(layout);
		layout.numColumns = 2;
		
		Label label = new Label(container, SWT.NORMAL);
	    label.setText("Candidates File:");
	    
	    GridData gridData = new GridData(SWT.FILL, SWT.CENTER, true,
		        false);
	    
	    Label labelResource = new Label(container, SWT.BORDER);
	    labelResource.setText("");
	    labelResource.setLayoutData(gridData);
	    
	    gridData = new GridData(SWT.END, SWT.CENTER, false,
		        false);
	    gridData.horizontalSpan = 2;
	    
	    Button button = new Button(container, SWT.PUSH);
	    button.setLayoutData(gridData);
	    
	    button.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false,
	        false));
	        
	    button.setText("Browse workspace...");
	    button.addSelectionListener(new SelectionAdapter() {
	      @Override
	      public void widgetSelected(SelectionEvent e) {
	        ResourceFileSelectionDialog resourceDialog = new ResourceFileSelectionDialog("Candidates File", "Choose .csv candidates file:", new String[] {"csv"}, container.getShell());
	        resourceDialog.open();
	        
	        if(resourceDialog.getFirstResult() != null) {
	        
		        candidatesFile = URI.createPlatformResourceURI(((IFile)resourceDialog.getFirstResult()).getFullPath().toString());
		        
		        System.out.println("" + ((IFile)resourceDialog.getFirstResult()).getFullPath().toString());
		        labelResource.setText("" + URI.createPlatformResourceURI(((IFile)resourceDialog.getFirstResult()).getFullPath().toString(), true));
		        setPageComplete(true);
		    } else {
		    	setPageComplete(false);
		    }
	        container.layout();
	      }
	    });
	    
	    setControl(container);
	    if(candidatesFile != null) {
	    	setPageComplete(true);
	    } else {
	    	setPageComplete(false);
	    }
	    */
	}
	
	private String[] getOptions(List<String> allResources, List<String> defaultPath, int index, List<Combo> combos) {
		
		List<String> options = new ArrayList<String>(allResources);
		
		for(Combo combo: combos) {
			if(options.contains(combo.getText())) 
				options.remove(combo.getText());
		}
		for(int i = 0; i < index; i++) {
			options.remove(defaultPath.get(i));
		}
		
		return options.toArray(new String[options.size()]);
	}

}
