package de.tubs.areva.command;

import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import org.xml.sax.*;
import org.w3c.dom.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.io.BufferedWriter;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.IHandler;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gef4.graph.Edge;
import org.eclipse.gef4.graph.Graph;
import org.eclipse.gef4.layout.algorithms.SpringLayoutAlgorithm;
import org.eclipse.gef4.zest.fx.ZestProperties;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.handlers.HandlerUtil;
import org.javatuples.Triplet;

import de.tubs.areva.emf.model.darg.ARG;
import de.tubs.areva.emf.model.darg.Architecture;
import de.tubs.areva.emf.model.opmode.OperatingModeSelection;
import de.tubs.areva.emf.model.qadag.Node;
import de.tubs.areva.emf.model.qadag.QADAG;
import de.tubs.areva.resourcerelations.Resource;
import de.tubs.areva.resourcerelations.ResourceOptions;
import de.tubs.areva.ui.module.DARGZestEdge;
import de.tubs.areva.ui.module.DARGZestNode;
import de.tubs.areva.ui.module.QADAGZestNode;
import de.tubs.areva.ui.view.DARGZestView;
import de.tubs.areva.util.ResourceHelper;
import de.tubs.areva.util.emf.ResourceManager;

public class ProcessResourceFailure extends AbstractHandler implements IHandler {

	private static int i;
	private int id = 0;
	protected static final String ID = ZestProperties.CSS_ID__NE;
	protected static final String LABEL = ZestProperties.LABEL__NE;
	
	

	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		
		ResourceSet operatingModeRS = new ResourceSetImpl();
		
		org.eclipse.emf.ecore.resource.Resource selectedOpMode = null;
		
		ISelection selection = HandlerUtil.getActiveWorkbenchWindow(event)
                .getActivePage().getSelection();
        if (selection != null & selection instanceof IStructuredSelection) {
            IStructuredSelection strucSelection = (IStructuredSelection) selection;
            for (Iterator<Object> iterator = strucSelection.iterator(); iterator.hasNext();) {
            	IFile file = (IFile)iterator.next();
            	
            	selectedOpMode = operatingModeRS.getResource(org.eclipse.emf.common.util.URI.createURI(file.getLocationURI().toString()), true);
                System.out.println("" + file.getLocationURI());
            }
        }
        
        if(selectedOpMode == null) {
        	System.out.println("ERROR: No selection found");
        }
		
        OperatingModeSelection opModeSelection = (OperatingModeSelection)selectedOpMode.getContents().get(0);
        
        ARG arg = (ARG) opModeSelection.getStartArchitecture().eContainer();
		
		// process arg
		
		List<org.javatuples.Triplet<Architecture, Architecture, String>> processedPath = new ArrayList<org.javatuples.Triplet<Architecture, Architecture, String>>();
		processFaultyResources(arg, opModeSelection.getFailingResources(), opModeSelection.getStartArchitecture(), processedPath, selectedOpMode);
		
		ResourceManager.saveResource(arg.eResource());
		
		
		// generate zest tree
		
		Graph dargZestTree = generateTreeFromModel(arg, processedPath);
		
		DARGZestView view = null;
		
		try {
			view = (DARGZestView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("Mittwochsqadag.dargzestview");
		} catch (PartInitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(view != null) {
			view.setGraph(dargZestTree);
		}
		
		for(IProject project: ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
			
			try {
				project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		
		return null;
	}
	
	// general numbers text file
	private void addGeneralNumbers(
			Document dom,
			Element pathEle, 
			Resource faultyResource, 
			List<Resource> allResources, 
			List<Resource> healthyResources,
			int faultyResourceCount, 
			Architecture current, 
			boolean conditionsMet, 
			int pathNodes, 
			int qualityComparisons, 
			List<Architecture> qualityComparedArchitectures,
			int unguidedComparisons, 
			List<Architecture> unguidedComparedArchitectures,
			int comparisons,
			List<Architecture> comparedArchitectures,
			Architecture target
			) {
		
		Element thisPathEle;
		Element e;
		
		if(conditionsMet) {
			thisPathEle = dom.createElement("idle");
		} else {
			thisPathEle = dom.createElement("changed");
		}
		
		e = dom.createElement("number");
		e.appendChild(dom.createTextNode("" + faultyResourceCount));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("sourceArchitecture");
		e.appendChild(dom.createTextNode("" + current.getId()));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("faultyResource");
		e.appendChild(dom.createTextNode("" + faultyResource.getName()));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("architectureValid");
		e.appendChild(dom.createTextNode("" + conditionsMet));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("pathNodes");
		e.appendChild(dom.createTextNode("" + pathNodes));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("targetArchitecture");
		if(target == null) {
			e.appendChild(dom.createTextNode("-none-"));
		} else {
			e.appendChild(dom.createTextNode("" + target.getId()));
		}
		thisPathEle.appendChild(e);
		
		e = dom.createElement("qualityDifference");
		if(target == null) {
			e.appendChild(dom.createTextNode(""));
		} else {
			String qualityDifference = "";
			qualityDifference = String.format(java.util.Locale.US,"%.5f", current.getQuality()) + ":" + String.format(java.util.Locale.US,"%.5f",target.getQuality());
			e.appendChild(dom.createTextNode("" + qualityDifference));
		}
		thisPathEle.appendChild(e);
		
		e = dom.createElement("resourceDifference");
		if(target == null) {
			e.appendChild(dom.createTextNode(""));
		} else {
			e.appendChild(dom.createTextNode("" + ResourceHelper.GetArchitectureDifferences(current, target)));
		}
		thisPathEle.appendChild(e);
		
		Element comparedArchitecturesEle;
		comparedArchitecturesEle = dom.createElement("comparedArchitectures");
		for(Architecture comparedArchitecture: comparedArchitectures) {
			e = dom.createElement("architecture");
			e.appendChild(dom.createTextNode("" + comparedArchitecture.getId()));
			comparedArchitecturesEle.appendChild(e);
		}
		thisPathEle.appendChild(comparedArchitecturesEle);
		
		Element unguidedComparedArchitecturesEle;
		unguidedComparedArchitecturesEle = dom.createElement("unguidedComparedArchitectures");
		for(Architecture comparedArchitecture: unguidedComparedArchitectures) {
			e = dom.createElement("architecture");
			e.appendChild(dom.createTextNode("" + comparedArchitecture.getId()));
			unguidedComparedArchitecturesEle.appendChild(e);
		}
		thisPathEle.appendChild(unguidedComparedArchitecturesEle);
		
		Element qualityComparedArchitecturesEle;
		qualityComparedArchitecturesEle = dom.createElement("qualityComparedArchitectures");
		for(Architecture comparedArchitecture: qualityComparedArchitectures) {
			e = dom.createElement("architecture");
			e.appendChild(dom.createTextNode("" + comparedArchitecture.getId()));
			qualityComparedArchitecturesEle.appendChild(e);
		}
		thisPathEle.appendChild(qualityComparedArchitecturesEle);
		
		e = dom.createElement("comparisonsCount");
		e.appendChild(dom.createTextNode("" + comparedArchitectures.size()));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("unguidedComparisonsCount");
		e.appendChild(dom.createTextNode("" + unguidedComparedArchitectures.size()));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("qualityComparisonsCount");
		e.appendChild(dom.createTextNode("" + qualityComparedArchitectures.size()));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("comparisonsSum");
		e.appendChild(dom.createTextNode("" + comparisons));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("unguidedComparisonsSum");
		e.appendChild(dom.createTextNode("" + unguidedComparisons));
		thisPathEle.appendChild(e);
		
		e = dom.createElement("qualityComparisonsSum");
		e.appendChild(dom.createTextNode("" + qualityComparisons));
		thisPathEle.appendChild(e);
		
		Element availableResourcesEle;
		availableResourcesEle = dom.createElement("availableResources");
		for(Resource healthyResource: healthyResources) {
			e = dom.createElement("resource");
			e.appendChild(dom.createTextNode("" + healthyResource.getName()));
			availableResourcesEle.appendChild(e);
		}
		thisPathEle.appendChild(availableResourcesEle);
		
		pathEle.appendChild(thisPathEle);
	}
	
	private void setupGeneralNumbers(
			Document dom,
			Element rootEle,
			List<Resource> allResources, 
			int nodeCount,
			int edgeCount
			) {
		
		Element allResourcesNode = null;
		Element e = null;
		
		allResourcesNode = dom.createElement("allResources");
		
		for(Resource resource: allResources) {
			e = dom.createElement("architecture");
			e.appendChild(dom.createTextNode(resource.getName()));
			allResourcesNode.appendChild(e);
		}
		
		rootEle.appendChild(allResourcesNode);
		
		e = dom.createElement("domainSize");
		e.appendChild(dom.createTextNode("" + nodeCount));
		rootEle.appendChild(e);
		
		e = dom.createElement("interconnections");
		e.appendChild(dom.createTextNode("" + edgeCount));
		rootEle.appendChild(e);
	}
	
	private int getNodeCount(ARG dargFile) {
		
int 	size = 0;
		
		for(Architecture architecture: dargFile.getArchitectures()) {
			if(!Double.isNaN(architecture.getQuality())) {
				size++;
			}
		}
		
		return size;
	}
	
	private int getEdgeCount(ARG dargFile) {
		
		int edgeCount = 0;
		
		for(Architecture architecture: dargFile.getArchitectures()) {
			
			if(Double.isNaN(architecture.getQuality())) {
				continue;
			}
			
			for(Architecture targetArchitecture: architecture.getRelatedArchitectures()) {
				
				if(!Double.isNaN(targetArchitecture.getQuality())) {
					edgeCount++;
				}
			}
		}
		
		return edgeCount;
	}
	
	// efficiency textfile (path node count)
	private String addEfficiency(String efficiencyString, int pathNodes, int qualityComparisons) {
		
		String output = efficiencyString;
		String nl = System.lineSeparator();
		
		output += nl + nl;
		output += "Nodes in Path: " + pathNodes + nl;
		output += "Sum of necessary Quality Comparisons: " + qualityComparisons;
		
		return output;
		
	}
	
	// domain density
	private String getStructuralDomainDensityCSV(ARG dargFile) {
		
		String nl = System.lineSeparator();
		
		String output = "";
		
		int size = 0;
		
		
		
		for(Architecture architecture: dargFile.getArchitectures()) {
			if(!Double.isNaN(architecture.getQuality())) {
				size++;
			}
		}
		
		int[][] table = new int[size][];
		
		for(int i = 0; i < size; i++) {
			table[i] = new int[size];
		}
		
		String[] validArchitectures = new String[size];
		
		for(int i = 0, ix = 0; i <  dargFile.getArchitectures().size(); i++) {
			
			Architecture target = dargFile.getArchitectures().get(i);
			
			if(Double.isNaN(target.getQuality())) {
				continue;
			} 
			
			for(int j = 0, jx = 0; j <  dargFile.getArchitectures().size(); j++) {
				
				Architecture source = dargFile.getArchitectures().get(j);
				
				if(Double.isNaN(source.getQuality())) {
					continue;
				} 
				
				int difference = 0;
				
				if(!target.getId().equals(source.getId())) {
					difference = ResourceHelper.GetArchitectureDifferences(source, target);
				}
				
				table[ix][jx] = difference;
				
				jx++;
			}
			validArchitectures[ix] = target.getId();
			ix++;
		}
		
		for(int j = 0; j <  size; j++) {
			
			output += ";" + validArchitectures[j];
		}
		
		for(int i = 0; i <  size; i++) {
			
			output += nl + validArchitectures[i];
			
			for(int j = 0; j <  size; j++) {
				
				output += ";" + table[i][j];
			}
		}
		
		return output;
	}
	
	private String getQualityDomainDensityCSV(ARG dargFile) {
		
		String nl = System.lineSeparator();
		
		String output = "";
		
		int size = 0;
		
		
		
		for(Architecture architecture: dargFile.getArchitectures()) {
			if(!Double.isNaN(architecture.getQuality())) {
				size++;
			}
		}
		
		String[][] table = new String[size][];
		
		for(int i = 0; i < size; i++) {
			table[i] = new String[size];
		}
		
		String[] validArchitectures = new String[size];
		
		for(int i = 0, ix = 0; i <  dargFile.getArchitectures().size(); i++) {
			
			Architecture target = dargFile.getArchitectures().get(i);
			
			if(Double.isNaN(target.getQuality())) {
				continue;
			} 
			
			for(int j = 0, jx = 0; j <  dargFile.getArchitectures().size(); j++) {
				
				Architecture source = dargFile.getArchitectures().get(j);
				
				if(Double.isNaN(source.getQuality())) {
					continue;
				} 
				
				String qualityDifference = "";
				qualityDifference = String.format(java.util.Locale.US,"%.5f", source.getQuality()) + ":" + String.format(java.util.Locale.US,"%.5f",target.getQuality());
				
				table[ix][jx] = qualityDifference;
				
				jx++;
			}
			validArchitectures[ix] = target.getId();
			ix++;
		}
		
		for(int j = 0; j <  size; j++) {
			
			output += ";" + validArchitectures[j];
		}
		
		for(int i = 0; i <  size; i++) {
			
			output += nl + validArchitectures[i];
			
			for(int j = 0; j <  size; j++) {
				
				output += ";" + table[i][j];
			}
		}
		
		return output;
	}
	
	private int getMinValue(ResourceOptions options) {
		
		if(options.getSubGroups().size() > 0) {
			
			int minValue = 0;
			
			for(ResourceOptions option: options.getSubGroups()) {
				minValue += getMinValue(option);
			}
			
			return minValue;
			
		} else {
			return Integer.parseInt(options.getMinElements());
		}
	}

	private void processFaultyResources(ARG dargFile, List<Resource> faultyResources, Architecture startingArchitecture, List<org.javatuples.Triplet<Architecture, Architecture, String>> processedPath, org.eclipse.emf.ecore.resource.Resource selectedOpMode) {
		String timeStamp = new SimpleDateFormat("dd-MM_HH-mm-ss").format(new Date());
		
		
		String outputDirectory = selectedOpMode.getURI().toFileString();
		outputDirectory = outputDirectory.substring(0, outputDirectory.lastIndexOf('\\') + 1) + timeStamp + '\\';
		
		Path filePath = Paths.get(outputDirectory);

	    // make sure the directories exist
	    try {
			Files.createDirectories(filePath);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		int nodeCount = getNodeCount(dargFile);
		int edgeCount = getEdgeCount(dargFile);
		
		Document dom;

	    // instance of a DocumentBuilderFactory
	    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	    
	    // use factory to get an instance of document builder
	    DocumentBuilder db = null;
		try {
			db = dbf.newDocumentBuilder();
		} catch (ParserConfigurationException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	    // create instance of DOM
	    dom = db.newDocument();
	    Element rootEle = dom.createElement("results");
	    dom.appendChild(rootEle);
	    
	    Element pathEle = dom.createElement("path");
		rootEle.appendChild(pathEle);
	    		
		// domain density
		String structuralDomainDensityOutput = getStructuralDomainDensityCSV(dargFile);
		String qualityDomainDensityOutput = getQualityDomainDensityCSV(dargFile);
		
		try {
		    Files.write(Paths.get(outputDirectory + "domaindensity_structural.csv"), structuralDomainDensityOutput.getBytes(StandardCharsets.UTF_8),
		            StandardOpenOption.CREATE, StandardOpenOption.APPEND);
		} catch (IOException e) {
		    e.printStackTrace();
		}
		
		try {
		    Files.write(Paths.get(outputDirectory + "domaindensity_quality.csv"), qualityDomainDensityOutput.getBytes(StandardCharsets.UTF_8),
		            StandardOpenOption.CREATE, StandardOpenOption.APPEND);
		} catch (IOException e) {
		    e.printStackTrace();
		}
		
		// efficiency
		String efficiencyOutput = "";
		int pathNodes = 1;
		int qualityComparisons = 0;
		int comparisons = 0;
		int unguidedComparisons = 0;
		
		Architecture start = startingArchitecture;
		List<Resource> activeResources = new ArrayList<Resource>();
		List<Resource> allResources = new ArrayList<Resource>();
		
		
		
		for(Architecture architecture: dargFile.getArchitectures()) {
			
			for(ResourceOptions option: architecture.getBoundResourceOptions()) {
				getAllResources(option, activeResources);
			}
			
			architecture.setHidden(true);
		}
		
		for(Architecture architecture: dargFile.getArchitectures()) {
			
			for(ResourceOptions option: architecture.getBoundResourceOptions()) {
				getAllResources(option, allResources);
			}
		}
		
		setupGeneralNumbers(dom, rootEle, allResources, nodeCount, edgeCount);
		
		Architecture current = start;
		Architecture oldCurrent = null;
		int faultyResourceCount = 0;
		
		for(Resource faultyResource: faultyResources) {
			faultyResourceCount++;
			if(current == null) {
				if(oldCurrent != null) {
					oldCurrent.setMarked(-1f);
					//processedPath.add(new org.javatuples.Triplet<Architecture, Architecture, String>(oldCurrent, oldCurrent, "-" + faulty));
					
				}
				continue;
			}
			
			
			current.setHidden(false);
			
			Architecture nextNode = null;
			if(faultyResource != null) {
				System.out.println("Processing fault: " + faultyResource.getName());
			} else {
				System.out.println("Resource not found! (" + faultyResource.getName() + ")");
			}
			
			activeResources.remove(faultyResource);
			
			boolean conditionsMet = true;
			
			for(ResourceOptions options: current.getBoundResourceOptions()) {
				conditionsMet = conditionsMet && conditionsMet(options, activeResources);
			}
			
			List<Architecture> qualityComparedArchitectures = new ArrayList<Architecture>();
			List<Architecture> unguidedComparedArchitectures = new ArrayList<Architecture>();
			List<Architecture> comparedArchitectures = new ArrayList<Architecture>();
			Architecture target = null;
			
			if(conditionsMet) {
				processedPath.add(new org.javatuples.Triplet<Architecture, Architecture, String>(current, current, "-" + faultyResource.getName()));
				addGeneralNumbers(dom, pathEle, faultyResource, allResources, activeResources, faultyResourceCount, current, true, pathNodes, qualityComparisons, qualityComparedArchitectures, unguidedComparisons, unguidedComparedArchitectures, comparisons, comparedArchitectures, current);
				continue;
			}
			
			for(Architecture following: current.getRelatedArchitectures()) {
				
				comparisons++;
				
				comparedArchitectures.add(following);
				
				conditionsMet = true;
				
				for(ResourceOptions options: following.getBoundResourceOptions()) {
					conditionsMet = conditionsMet && conditionsMet(options, activeResources);
				}
				
				if(conditionsMet) {
					
					unguidedComparisons++;
					
					unguidedComparedArchitectures.add(following);
					
					if(!Double.isNaN(following.getQuality())) {
					
						qualityComparedArchitectures.add(following);
						
						qualityComparisons++;
						
						if(nextNode == null) {
							nextNode = following;
						} else {
							if(nextNode.getQuality() < following.getQuality()) {
								nextNode = following;
							}
						}
					}
				}
			}
			
			if(nextNode != null) {
				processedPath.add(new org.javatuples.Triplet<Architecture, Architecture, String>(current, nextNode, "-" + faultyResource.getName()));
				pathNodes++;
				
				target = nextNode;
			} else {
				processedPath.add(new org.javatuples.Triplet<Architecture, Architecture, String>(current, current, "-" + faultyResource.getName()));
				
				target = null;
			}
			
			
			efficiencyOutput += addEfficiency(efficiencyOutput, pathNodes, qualityComparisons);
			
			addGeneralNumbers(dom, pathEle, faultyResource, allResources, activeResources, faultyResourceCount, current, false, pathNodes, qualityComparisons, qualityComparedArchitectures, unguidedComparisons, unguidedComparedArchitectures, comparisons, comparedArchitectures, target);
			
			oldCurrent = current;
			current = nextNode;
			
			
		}
		
		try {
            Transformer tr = TransformerFactory.newInstance().newTransformer();
            tr.setOutputProperty(OutputKeys.INDENT, "yes");
            tr.setOutputProperty(OutputKeys.METHOD, "xml");
            tr.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
            tr.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

            // send DOM to file
            tr.transform(new DOMSource(dom), 
                                 new StreamResult(new FileOutputStream(outputDirectory + "result.xml")));

        } catch (TransformerException te) {
            System.out.println(te.getMessage());
        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());
        }
		
		if(current != null) {
			current.setHidden(false);
		}
	}
	
	private boolean conditionsMet(ResourceOptions options, List<Resource> activeResources) {
		
		if(options.getSubGroups().size() > 0) {
			
			boolean conditionsMet = true;
			
			for(ResourceOptions subOptions: options.getSubGroups()) {
				conditionsMet = conditionsMet && conditionsMet(subOptions, activeResources);
			}
			
			return conditionsMet;
			
		} else {
			
			int containedResources = 0;
			
			for(Resource resource: options.getResources()) {
				for(Resource activeResource: activeResources) {
					if(resource.getName().equals(activeResource.getName())) {
						containedResources++;
					}
				}
			}
			
			if(containedResources < Integer.parseInt(options.getMinElements())) {
				return false;
			}
			
			return true;
		}
	}
	
	private void getAllResources(ResourceOptions options, List<Resource> allResources) {
		
		if(options.getSubGroups().size() > 0) {
			for(ResourceOptions subOptions: options.getSubGroups()) {
				getAllResources(subOptions, allResources);
			}
		} else {
			for(Resource resource: options.getResources()) {
				boolean contains = false;
				for(Resource allResource: allResources) {
					if(resource.getName().equals(allResource.getName())) {
						contains = true;
						break;
					}
				}
				
				if(!contains) {
					allResources.add(resource);
				}
			}
		}
	}
	
	private Graph generateTreeFromModel(ARG archNodes, List<Triplet<Architecture, Architecture, String>> processedPath) {
		List<org.eclipse.gef4.graph.Node> nodes = new ArrayList<>();
		List<org.eclipse.gef4.graph.Edge> edges = new ArrayList<>();
		HashMap<Architecture, org.eclipse.gef4.graph.Node> archToNode = new HashMap<>();
		
		// draw nodes
		for(Architecture architecture: archNodes.getArchitectures()) {
			
			if(!architecture.isHidden()) {
				
				org.eclipse.gef4.graph.Node newNode = null;
				
				if(architecture.getMarked() >= 0f) {
					if(architecture.isOptimal()) {
						newNode = n(architecture, ZestProperties.LABEL__NE, "Optimal Architecture " + architecture.getId() + ": " + architecture.getQuality(), ZestProperties.TOOLTIP__N, "Architecture " + architecture.getId(), ZestProperties.SHAPE_CSS_STYLE__N, "-fx-border-color: green; -fx-border-width: 200;", ZestProperties.LABEL_CSS_STYLE__NE, "-fx-font-color: green;");
						ZestProperties.setShapeCssStyle(newNode, "-fx-background-color: green; -fx-border-width: 200; -fx-fill: green;");
						ZestProperties.setLabelCssStyle(newNode, "-fx-font-color: green;");
					} else {
						newNode = n(architecture, ZestProperties.LABEL__NE, "Architecture " + architecture.getId() + ": " + architecture.getQuality(), ZestProperties.TOOLTIP__N, "Architecture " + architecture.getId());
					}
				} else {
					newNode = n(architecture, ZestProperties.LABEL__NE, "Failed Architecture " + architecture.getId() + ": " + architecture.getQuality(), ZestProperties.TOOLTIP__N, "Architecture " + architecture.getId(), ZestProperties.SHAPE_CSS_STYLE__N, "-fx-border-color: red; -fx-border-width: 200;", ZestProperties.LABEL_CSS_STYLE__NE, "-fx-font-color: red;");
					ZestProperties.setShapeCssStyle(newNode, "-fx-background-color: red; -fx-border-width: 200; -fx-fill: red;");
					ZestProperties.setLabelCssStyle(newNode, "-fx-font-color: red;");
				}
				
				Graph qadag = createSimpleQadagGraphFromModel(architecture.getQadag());
				newNode.setNestedGraph(qadag);
				
				nodes.add(newNode);
				
				archToNode.put(architecture, newNode);
			}
		}
		
		//draw edges
		for(Architecture architecture: archNodes.getArchitectures()) {
			
			if(!architecture.isHidden()) {
				
				for(Architecture hiddenArchitecture: architecture.getRelatedArchitectures()) {
					
					if(hiddenArchitecture.isHidden()) {
						
						org.eclipse.gef4.graph.Node hiddenNode = null;
						
						if(!archToNode.containsKey(hiddenArchitecture)) {
							
							Graph hiddenQadag = createSimpleQadagGraphFromModel(hiddenArchitecture.getQadag());
							
							if(hiddenArchitecture.isOptimal()) {
								hiddenNode = n(hiddenArchitecture, ZestProperties.LABEL__NE, "Optimal Architecture " + hiddenArchitecture.getId() + ": " + hiddenArchitecture.getQuality(), ZestProperties.TOOLTIP__N, "Architecture " + hiddenArchitecture.getId(), ZestProperties.SHAPE_CSS_STYLE__N, "-fx-border-color: green; -fx-border-width: 200;", ZestProperties.LABEL_CSS_STYLE__NE, "-fx-font-color: green;");
								ZestProperties.setShapeCssStyle(hiddenNode, "-fx-background-color: green; -fx-border-width: 200; -fx-fill: green;");
								ZestProperties.setLabelCssStyle(hiddenNode, "-fx-font-color: green;");
							} else {
								hiddenNode = n(hiddenArchitecture, ZestProperties.LABEL__NE, "Architecture " + hiddenArchitecture.getId() + ": " + hiddenArchitecture.getQuality(), ZestProperties.TOOLTIP__N, "Architecture " + hiddenArchitecture.getId());
							}
							
							hiddenNode.setNestedGraph(hiddenQadag);
							
							archToNode.put(hiddenArchitecture, hiddenNode);
							
							//nodes.add(hiddenNode);
							
							ZestProperties.setInvisible(hiddenNode, true);
						
						} else {
						
						
						
						Edge hiddenEdge = e(archToNode.get(architecture), archToNode.get(hiddenArchitecture), "Not taken", ZestProperties.LABEL__NE, "Not taken", ZestProperties.TARGET_DECORATION__E, new javafx.scene.shape.Polygon(0, 0, 10, 3, 10, -3),
								ZestProperties.TARGET_DECORATION_CSS_STYLE__E, "-fx-fill: red;");
						
						
						//nodes.add(hiddenNode);
						//edges.add(hiddenEdge);
						
						}
					}
				}
			}
		}
		String output = "Path: \n";
		for(org.javatuples.Triplet<Architecture, Architecture, String> step: processedPath) {
			Edge edge = e(archToNode.get(step.getValue0()), archToNode.get(step.getValue1()), "" + step.getValue2(), ZestProperties.LABEL__NE, "" + step.getValue2(), ZestProperties.TARGET_DECORATION__E, new javafx.scene.shape.Polygon(0, 0, 10, 3, 10, -3),
					ZestProperties.TARGET_DECORATION_CSS_STYLE__E, "-fx-fill: green;");
			
			output += step.getValue0().getId() + " ->(-" + step.getValue2() + ") " + step.getValue1().getId() + "\n";
			edges.add(edge);
		}
		
		System.out.println(output);
		
		//JOptionPane.showConfirmDialog(null, output, "alert", JOptionPane.OK_CANCEL_OPTION);
		
		HashMap<String, Object> attrs = new HashMap<>();
		attrs.put(ZestProperties.LAYOUT_ALGORITHM__G, new SpringLayoutAlgorithm());
		
		return new Graph(attrs, nodes, edges);
	}
	
	private List<Resource> getResourcesLost(Architecture source, Architecture target) {
		
		List<Resource> excludes = new ArrayList<>();
		
		for(Resource resource: source.getBoundResources()) {
			boolean contains = false;
			for(Resource resource2: target.getBoundResources()) {
				if(EcoreUtil.equals(resource, resource2)) {
					contains = true;
				}
			}
			
			if(!contains) {
				excludes.add(resource);
			}
		}
		
		return excludes;
	}
	
	private Graph createSimpleQadagGraphFromModel(QADAG qadagFile) {
		
		List<org.eclipse.gef4.graph.Node> nodes = new ArrayList<>();
		List<org.eclipse.gef4.graph.Edge> edges = new ArrayList<>();
		
		org.eclipse.gef4.graph.Node rootNode = n(null, ZestProperties.LABEL__NE, "" + qadagFile.getRoot().getName() + ": " + qadagFile.getRoot().getValue(), ZestProperties.TOOLTIP__N, "Node " + qadagFile.getRoot().getName());
		
		nodes.add(rootNode);
		
		for(Node qadagNode: qadagFile.getRoot().getNodes()) {
			
			org.eclipse.gef4.graph.Node node = nQ(qadagNode, ZestProperties.LABEL__NE, "" + qadagNode.getName() + ": " + qadagNode.getValue(), ZestProperties.TOOLTIP__N, "Node " + qadagNode.getName());
			
			nodes.add(node);
			edges.add(e(rootNode, node, ""));
		}
		
		HashMap<String, Object> attrs = new HashMap<>();
		
		attrs.put(ZestProperties.LAYOUT_ALGORITHM__G, new SpringLayoutAlgorithm());
		return new Graph(attrs, nodes, edges);
	}
	
	protected static org.eclipse.gef4.graph.Node n(Architecture architecture, Object... attr) {
		
		Map<String, Object> attrs = new HashMap<>();
		
		String id = genId();
		attrs.put(ID, id);
		attrs.put(LABEL, id);
		for (int i = 0; i < attr.length; i += 2) {
			attrs.put(attr[i].toString(), attr[i + 1]);
		}
		DARGZestNode zestNode = new DARGZestNode(attrs);
		zestNode.setArchitecture(architecture);
		
		return zestNode;
	}
	
	protected static org.eclipse.gef4.graph.Node nQ(Node node, Object... attr) {
		
		Map<String, Object> attrs = new HashMap<>();
		
		String id = genId();
		attrs.put(ID, id);
		attrs.put(LABEL, id);
		for (int i = 0; i < attr.length; i += 2) {
			attrs.put(attr[i].toString(), attr[i + 1]);
		}
		QADAGZestNode zestNode = new QADAGZestNode(attrs);
		zestNode.setQadagNode(node);
		
		return zestNode;
	}
	
	protected static Edge e(org.eclipse.gef4.graph.Node n,
		org.eclipse.gef4.graph.Node m, String label, Object... attr) {
	
		Map<String, Object> attrs = new HashMap<>();
		
		String id = genId();
		attrs.put(ID, id);
		attrs.put(LABEL, id);
		for (int i = 0; i < attr.length; i += 2) {
			attrs.put(attr[i].toString(), attr[i + 1]);
		}
		
		
		if((n instanceof DARGZestNode) && (m instanceof DARGZestNode)) {
			
			DARGZestEdge edge = new DARGZestEdge(attrs,n,m);
			edge.setSourceArchitecture(((DARGZestNode)n).getArchitecture());
			edge.setTargetArchitecture(((DARGZestNode)m).getArchitecture());
			
			return edge;
		} 
		
		Edge edge = new Edge(attrs, n, m);
		
		return edge;
	}
	
	private static String genId() {
		i++;
		return "" + i;
	}
}
