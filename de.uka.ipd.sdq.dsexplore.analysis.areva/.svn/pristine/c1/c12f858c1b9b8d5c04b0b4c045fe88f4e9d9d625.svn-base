package de.uka.ipd.sdq.dsexplore.analysis.areva;

import java.util.Map;

import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.opt4j.core.Criterion;
import org.palladiosimulator.solver.models.PCMInstance;

import de.uka.ipd.sdq.dsexplore.analysis.IAnalysisResult;
import de.uka.ipd.sdq.dsexplore.qml.pcm.datastructures.EvaluationAspectWithContext;

public class ArevaAnalysisResult implements IAnalysisResult {
	
	/** Logger for log4j. */
	private static Logger logger = 
		Logger.getLogger("de.uka.ipd.sdq.dsexplore.analysis.areva");

//	private double totalCost;
//	private double operatingCost;
//	private double initialCost;
	private double torque;
	
	private Map<Criterion, EvaluationAspectWithContext> criterionToAspectMap;
	private ArevaSolverQualityAttributeDeclaration arevaQualityDimensionDeclaration;


//	public CostAnalysisResult(double totalCost, double initialCost, double operatingCost, PCMInstance pcmInstance2, Map<Criterion, EvaluationAspectWithContext> criterionToAspect, CostSolverQualityAttributeDeclaration costQualityAttribute) {
//		this.totalCost = totalCost;
//		this.operatingCost = operatingCost;
//		this.initialCost = initialCost;
//		this.criterionToAspectMap = criterionToAspect;
//		this.costQualityDimensionDeclaration = costQualityAttribute;
//	}
	public ArevaAnalysisResult(double torque, PCMInstance pcmInstance2, Map<Criterion, EvaluationAspectWithContext> criterionToAspect, ArevaSolverQualityAttributeDeclaration arevaQualityAttribute) {
		this.torque = torque;
		this.criterionToAspectMap = criterionToAspect;
		this.arevaQualityDimensionDeclaration = arevaQualityAttribute;
	}

	@Override
	public double getValueFor(Criterion criterion)  {
		//FIXME This is where the magic happens!
		EvaluationAspectWithContext aspect = this.criterionToAspectMap.get(criterion);
		
		if (aspect != null){
//			if (EcoreUtil.equals(aspect.getDimension(), this.costQualityDimensionDeclaration.getTotalCostDimension())){
//				return this.getTotalCost();
//			} else if (EcoreUtil.equals(aspect.getDimension(), this.costQualityDimensionDeclaration.getInitialCostDimension())){
//				return this.getInitialCost();
//			}  else if (EcoreUtil.equals(aspect.getDimension(), this.costQualityDimensionDeclaration.getOperatingCostDimension())){
//				return this.getOperatingCost();
//			}
			if (EcoreUtil.equals(aspect.getDimension(), this.arevaQualityDimensionDeclaration.getTorqueDimension())){
				return this.getTorque();
			} 
		} 
		
		logger.warn("Unknown aspect for Areva result, adding NaN.");
		return Double.NaN;
	}

//	private double getOperatingCost() {
//		return this.operatingCost;
//	}
//
//	private double getInitialCost() {
//		return this.initialCost;
//	}
//
//	public double getTotalCost() {
//		return totalCost;
//	}
	
	public double getTorque() {
		return torque;
	}


}
